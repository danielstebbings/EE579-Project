/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 09.03.2025 17:32:24

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 412160;
#else
constexpr int kTensorArenaSize = 411136;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,128,128,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 43778, -58315, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00013832183321937919, 9.5598661573603749e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 66,-13,-34,74,-76,-37,-34,68,108,-37,-12,-33,47,61,-13,-9,79,-127,60,-90,103,11,58,-84,-26,-6,-54,47,8,-88,-2,33, 
  /* [1][0][][] */ 36,84,86,-55,-62,85,13,5,-20,1,9,122,119,45,32,15,-25,10,-45,-83,-72,41,33,127,86,78,-21,10,104,-94,-105,5, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0045687197707593441, 0.0031575888860970736, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 306, 200, 160, -1361, -1649, 175, -1393, 1052, -1096, -1057, -86, 246, 240, 542, 158, -1933, -1452, -628, -573, -1323, -1175, 480, 91, 96, -8, 182, -1587, -1040, -1151, -1635, -926, -1730, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 6.1490034568123519e-05, 6.1489059589803219e-05, 7.2829156124498695e-05, 5.7356475736014545e-05, 6.2650513427797705e-05, 6.3989980844780803e-05, 6.0915986978216097e-05, 5.4369014833355322e-05, 6.0143018345115706e-05, 6.0124420997453853e-05, 6.1976861616130918e-05, 6.4328662119805813e-05, 5.4163829190656543e-05, 5.5512395192636177e-05, 7.2560200351290405e-05, 6.3387029513251036e-05, 5.9685095038730651e-05, 8.046946459216997e-05, 0.00010051937715616077, 5.8647994592320174e-05, 5.3431063861353323e-05, 5.7216017012251541e-05, 7.0018977567087859e-05, 7.1918795583769679e-05, 6.3238170696422458e-05, 6.4209649281110615e-05, 7.0675916504114866e-05, 5.8898101997328922e-05, 5.5685060942778364e-05, 5.3749612561659887e-05, 5.8753681514644995e-05, 5.8856356190517545e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -24,-69,96,16,79,-48,-106,-85,23,-64,-122,21,43,-21,-59,11,-33,-44,-81,-47,-48,-118,-4,88,-84,-23,39,-25,103,-31,-48,-85,49,-79,-100,25,-76,-100,-59,-11,58,-72,-127,57,32,-85,78,-14, 
  /* [1][0][][] */ -21,0,-51,7,-31,61,43,7,70,-80,-103,127,70,-17,-4,51,108,-5,47,126,-31,-14,44,33,45,21,-75,63,28,-34,85,-67,56,81,-3,11,54,59,-4,-53,-42,15,-3,-86,-30,45,-18,-40, 
  /* [2][0][][] */ 58,-17,-36,74,-14,-105,72,67,-85,68,-46,113,75,-27,29,-127,-28,6,40,57,-62,-26,90,19,-4,69,13,-21,-34,0,60,63,-51,-26,-67,-109,-56,80,81,-21,-71,-48,22,-6,-61,94,-16,-52, 
  /* [3][0][][] */ 47,-19,8,-47,-92,25,-122,9,26,-7,44,-23,57,91,39,-16,72,75,-81,-16,82,-107,-88,-127,-45,-124,-36,78,14,-109,112,-13,-79,-61,-43,-32,-114,-41,12,23,-46,-112,-107,49,38,2,-63,-104, 
  /* [4][0][][] */ 5,77,-33,10,-55,-36,4,-20,29,40,-24,8,-13,-43,-28,-71,-58,-38,-86,-24,55,-108,32,-8,-36,-8,43,-77,-77,11,-88,-69,31,69,-23,-109,-77,-35,-127,26,-74,-89,-81,-110,-8,61,-2,9, 
  /* [5][0][][] */ 98,-101,75,76,33,-127,28,44,60,-89,-19,-29,28,79,9,0,65,77,-49,99,33,19,17,-43,-83,-49,-43,-107,54,-15,-2,-81,-37,-12,-75,-17,-87,-35,39,3,-91,-36,50,63,-35,29,9,-46, 
  /* [6][0][][] */ 1,-54,70,35,-99,-49,-20,28,2,-98,-11,-102,47,23,65,-97,6,-12,-28,60,-96,-126,68,34,-71,-78,-18,-72,-51,-118,68,-89,-107,-127,-65,-92,-37,68,-122,83,55,20,-11,-33,-124,60,-57,-62, 
  /* [7][0][][] */ 110,66,-5,-22,-61,95,-45,19,92,23,-106,31,64,-91,58,55,97,24,9,127,59,26,-2,90,-60,88,26,62,-59,106,-61,47,26,26,60,70,-74,55,12,-48,100,-59,95,52,64,23,94,-95, 
  /* [8][0][][] */ -22,51,-66,-107,32,41,-86,-40,3,6,84,47,-27,-21,-78,-40,-90,67,-84,-20,3,-16,44,80,-126,127,69,64,-94,34,-67,105,67,-37,37,31,72,24,-46,69,56,65,-106,-96,-25,-53,-30,72, 
  /* [9][0][][] */ -23,-15,76,17,48,-115,-61,-127,14,20,-29,22,-46,-69,-111,-44,-18,-23,-109,-84,-20,67,-117,-114,74,-26,6,-1,-33,-73,-74,65,32,-22,4,-20,-91,-5,-55,-61,20,-83,25,-64,48,-6,-114,25, 
  /* [10][0][][] */ -40,51,60,-57,-20,78,68,19,30,24,-4,-44,83,43,-57,1,-38,100,-104,-42,-9,15,48,-69,-9,36,-127,-114,-41,46,-97,-90,71,68,91,47,-39,4,-39,25,-42,101,-100,-51,-88,-54,-3,-45, 
  /* [11][0][][] */ 120,-22,0,95,99,24,48,26,86,85,-88,127,7,-78,-1,-65,-29,-55,64,57,36,45,31,-84,-67,-77,-65,33,83,-47,0,-24,-70,-70,40,13,-41,60,-15,-48,-16,95,-45,-13,-35,-34,-71,-67, 
  /* [12][0][][] */ 44,20,-44,5,88,-23,-43,34,-89,68,-43,51,-34,-19,-1,-104,-76,-7,-48,-59,38,-37,29,97,-53,-62,42,-127,108,-35,-55,103,-88,-87,-52,-21,4,-78,-13,36,118,49,-106,-55,-23,-73,-40,120, 
  /* [13][0][][] */ 127,-81,119,108,95,101,80,68,67,-84,-1,9,101,78,50,-50,-82,-40,-47,54,75,-33,124,-33,-35,43,-32,-1,-62,-111,69,32,44,94,-14,20,-62,-27,40,65,-46,87,-30,7,-35,49,5,-18, 
  /* [14][0][][] */ -26,-105,73,52,58,-46,-19,-81,-87,-20,27,76,-17,-102,-89,-89,-28,-35,7,28,-29,3,2,40,-70,-58,-64,-2,-75,-127,-82,35,72,-26,-37,-31,75,64,21,-98,-4,-76,25,50,47,-82,36,-62, 
  /* [15][0][][] */ -26,-50,-70,18,34,-95,16,-121,22,-45,-95,-32,47,-28,-108,-116,27,-28,-116,-17,-1,-18,20,56,27,39,8,31,-24,20,21,-127,-30,-31,-86,-33,-100,66,42,-89,-15,53,-77,-54,-17,-109,-72,-107, 
  /* [16][0][][] */ -108,-2,63,-80,7,92,-61,7,28,11,-83,24,-50,-22,-55,-60,78,64,31,17,69,57,-78,22,-57,49,-42,51,-127,16,35,-10,-117,46,27,54,-63,39,-67,-73,-2,-75,55,67,26,71,66,-43, 
  /* [17][0][][] */ 89,-107,14,53,-24,-113,-14,-78,47,-49,50,66,74,7,-127,-5,6,78,59,89,-43,-29,28,-59,-1,52,-93,-30,75,-118,28,46,-13,-41,8,-26,-47,109,-74,3,-87,-20,8,4,-13,1,57,-72, 
  /* [18][0][][] */ -65,58,41,-51,-16,-18,-23,-9,-14,25,-20,-52,-34,127,25,1,0,-19,9,-32,43,-32,-7,-57,-9,-6,10,55,-6,23,43,20,14,-21,-68,-62,-32,6,-36,23,-39,-14,-32,18,-69,-10,2,-12, 
  /* [19][0][][] */ -2,11,40,6,27,-94,85,56,68,-79,19,-35,-111,27,-76,36,36,-112,71,23,-45,52,-62,-4,49,-94,16,-88,-109,-120,-60,14,49,-100,16,-15,-21,-69,-76,-106,21,-127,-92,4,-99,-2,54,-99, 
  /* [20][0][][] */ -22,76,48,70,-107,77,40,35,-6,-6,-17,-35,-36,88,27,-86,-73,-55,-96,-61,0,-64,-102,-90,55,-90,-77,33,-9,20,-33,108,75,18,-39,37,16,-44,-41,-127,-109,-55,-78,-88,-49,-90,-88,83, 
  /* [21][0][][] */ 108,33,84,-84,95,-113,81,22,18,-51,-42,71,17,-1,-69,-127,-70,-2,57,11,107,-31,82,-47,75,-42,-110,39,31,-35,14,-25,19,24,-52,-83,113,122,-98,-16,37,18,41,12,-75,-62,-49,97, 
  /* [22][0][][] */ 38,-51,-54,-74,69,-96,74,43,-80,70,-70,-64,91,-127,-111,-119,34,86,-91,-40,71,-69,28,31,69,-2,-123,52,-38,-84,-61,-84,39,39,14,-21,3,-8,-50,-89,13,-5,9,66,43,-90,69,-13, 
  /* [23][0][][] */ 68,-93,10,48,71,-127,5,-78,23,-55,30,84,23,-95,-10,-69,74,1,-71,92,74,-88,80,-28,2,-15,17,-13,66,-13,23,-38,-31,16,-1,-12,77,-15,-77,-3,-85,5,20,-109,-60,-57,76,20, 
  /* [24][0][][] */ -60,-54,-90,-59,-76,-126,-77,-81,38,101,33,50,100,16,-55,-127,-68,39,12,-35,82,-90,-47,-36,28,-44,36,22,97,18,-31,-69,-7,-11,37,-4,-44,-86,52,-42,-68,-81,88,-26,14,-32,36,67, 
  /* [25][0][][] */ -39,-71,-59,-5,78,-62,-85,44,38,-85,-49,51,69,-27,-122,-19,-48,78,37,-68,65,58,3,-40,15,-39,-127,6,78,-109,24,90,81,-98,38,41,86,-46,-18,-10,-57,88,-79,-5,82,39,60,36, 
  /* [26][0][][] */ 1,-95,-50,-43,-109,-22,-21,-45,-114,-127,76,29,-90,-10,69,-27,61,-7,-49,-83,-23,46,54,-1,32,48,66,30,-4,11,-98,-27,-57,-74,-64,-81,-82,34,-53,48,-50,41,11,5,-83,28,-47,53, 
  /* [27][0][][] */ -10,-14,-77,-113,-127,-83,-81,-36,17,67,13,-114,-46,31,51,-46,81,-6,34,-95,-105,-11,-47,-42,-113,22,-117,-24,34,4,-49,-29,33,40,-102,-97,-101,-78,-122,58,-104,-6,5,-6,66,1,39,70, 
  /* [28][0][][] */ 67,-3,62,14,-125,-76,-96,-98,-55,-127,55,40,-92,-81,-2,82,67,99,-71,40,-54,-2,-123,-75,-114,75,-80,-82,-89,-80,-7,-27,-116,9,55,51,-10,-112,-65,28,79,13,-102,43,-124,-34,-10,18, 
  /* [29][0][][] */ -2,31,30,-81,-115,-25,-107,-29,68,-44,-90,-124,77,-89,-54,-79,-121,74,6,-117,-115,-61,10,-21,-56,1,-33,-52,-127,-24,85,-24,20,-22,-104,-70,-39,74,-33,68,21,61,-65,61,-36,80,-87,-66, 
  /* [30][0][][] */ 2,-39,-76,23,-111,-1,-56,-33,80,-36,-23,-60,-112,16,40,-13,22,26,59,-101,18,-103,-122,-10,-123,-1,-30,90,-34,-115,-81,-18,-97,-85,-127,-67,-7,-37,-19,-1,58,-88,16,66,73,-58,74,40, 
  /* [31][0][][] */ 33,-98,-2,53,10,37,-76,-124,-51,-53,-82,-118,52,-127,-71,80,-92,-112,-1,5,21,-3,-67,65,17,-126,20,6,-102,-84,10,66,-14,-14,-117,-36,51,-62,-96,-120,22,-99,-54,-5,-31,-81,-67,-14, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0026990878395736217, 0.0026990449987351894, 0.0031968152616173029, 0.002517646411433816, 0.002750026760622859, 0.0028088220860809088, 0.002673890208825469, 0.0023865127004683018, 0.0026399609632790089, 0.0026391446590423584, 0.0027204570360481739, 0.002823688555508852, 0.0023775061126798391, 0.0024367009755223989, 0.0031850095838308334, 0.0027823559939861298, 0.0026198604609817266, 0.0035321845207363367, 0.0044122696854174137, 0.0025743371807038784, 0.0023453414905816317, 0.0025114810559898615, 0.003073463449254632, 0.0031568554695695639, 0.0027758216019719839, 0.0028184645343571901, 0.0031022995244711637, 0.0025853156112134457, 0.0024442800786346197, 0.0023593241348862648, 0.0025789763312786818, 0.0025834832340478897, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { -470, 1234, 1991, 3429, 8551, -237, -1912, 20620, 1313, 6820, 735, -1575, 4326, -2332, 7074, -286, -1283, -9158, 518, 2536, 3628, 4584, 4107, 288, -3986, -2101, 345, 3972, 1924, 6477, -997, 2339, 5626, 4619, 3396, 2030, 9332, 847, 1069, -1240, 437, 17278, -533, 1287, 7615, -310, 1391, 5396, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00025042047491297126, 0.00024598976597189903, 0.00011160610301885754, 0.00017229413788300008, 0.00010945309622911736, 0.00016449949180241674, 0.00017745325749274343, 4.3206593545619398e-05, 0.0001714306854410097, 0.00010086270049214363, 0.00018439158156979829, 0.00022402903414331377, 0.00014497368829324841, 0.00020763765496667475, 0.00010769964865176007, 0.00013856834266334772, 0.00012025755131617188, 2.8500464395619929e-05, 0.00019193143816664815, 0.00020529687753878534, 0.00016595941269770265, 0.00012344559945631772, 0.00015333980263676494, 0.00017763287178240716, 0.00014242967881727964, 0.00020379333000164479, 0.00014654020196758211, 0.00012421916471794248, 0.00017609306087251753, 0.00010686267341952771, 0.00013263977598398924, 0.00022169994190335274, 0.00010533404565649107, 0.00014176050899550319, 0.00011386509140720591, 0.00013242429122328758, 8.7657448602840304e-05, 0.00015894781972747296, 0.00013944927195552737, 0.0002137187693733722, 0.00019630181486718357, 5.4865020501893014e-05, 0.00017987476894631982, 0.00016370501543860883, 0.00010068336268886924, 0.00018242697115056217, 0.00017147310427390039, 0.00012139441969338804, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 35,-39,-85,25,-127,4,-66,2, 
  /* [1][0][][] */ -105,29,127,-3,-104,-31,14,-6, 
  /* [2][0][][] */ -27,126,-21,36,-87,-127,-2,97, 
  /* [3][0][][] */ -56,16,-21,127,10,-63,-70,-37, 
  /* [4][0][][] */ 27,-27,28,-107,-17,11,-127,19, 
  /* [5][0][][] */ 73,112,-38,-58,-37,-13,41,-127, 
  /* [6][0][][] */ 72,-51,38,100,-29,-127,-8,-85, 
  /* [7][0][][] */ 51,95,-56,-26,-77,-18,12,-127, 
  /* [8][0][][] */ 2,-36,51,2,6,20,-50,-127, 
  /* [9][0][][] */ -96,22,-87,14,-127,-57,-56,-26, 
  /* [10][0][][] */ 69,-7,109,-43,-127,13,96,93, 
  /* [11][0][][] */ 127,-46,-75,13,49,-11,-72,-1, 
  /* [12][0][][] */ -26,-127,119,31,29,-1,-93,74, 
  /* [13][0][][] */ 32,-81,54,2,36,-127,28,-77, 
  /* [14][0][][] */ -127,52,121,16,-8,-96,30,-34, 
  /* [15][0][][] */ 47,90,4,-83,-72,17,35,-127, 
  /* [16][0][][] */ 11,124,-49,72,-9,-36,-24,127, 
  /* [17][0][][] */ 4,102,-39,99,-39,77,-127,58, 
  /* [18][0][][] */ 86,-45,127,-17,49,-73,23,-34, 
  /* [19][0][][] */ 32,-27,21,127,25,-45,-33,-84, 
  /* [20][0][][] */ 12,10,-26,60,-8,56,-127,2, 
  /* [21][0][][] */ 34,-11,41,33,37,127,44,-60, 
  /* [22][0][][] */ 69,-127,-22,63,-64,46,8,23, 
  /* [23][0][][] */ -36,-97,9,-127,-25,-57,11,-123, 
  /* [24][0][][] */ 0,32,-13,-64,-46,-127,-40,49, 
  /* [25][0][][] */ 62,67,127,5,10,28,-40,-9, 
  /* [26][0][][] */ -127,49,110,-58,-80,-39,84,-4, 
  /* [27][0][][] */ -99,46,-45,-104,33,127,-15,91, 
  /* [28][0][][] */ 21,-127,56,61,48,-3,-52,125, 
  /* [29][0][][] */ -127,80,46,-32,-127,9,91,-21, 
  /* [30][0][][] */ 97,-116,-10,73,-127,-31,34,-77, 
  /* [31][0][][] */ 60,69,46,-27,-127,-2,24,107, 
  /* [32][0][][] */ -30,-10,101,-62,4,26,-90,-127, 
  /* [33][0][][] */ 57,59,124,-127,10,58,-26,62, 
  /* [34][0][][] */ -27,-114,81,-31,27,127,58,-113, 
  /* [35][0][][] */ 44,2,70,10,33,127,18,-56, 
  /* [36][0][][] */ -2,15,-14,38,12,-127,-5,20, 
  /* [37][0][][] */ 47,-27,47,33,-127,122,-33,-14, 
  /* [38][0][][] */ -127,-20,-116,-37,109,-57,-100,-9, 
  /* [39][0][][] */ 14,-4,48,-127,-28,55,-118,9, 
  /* [40][0][][] */ 85,-19,-57,-127,51,70,73,-30, 
  /* [41][0][][] */ 52,-38,-22,127,-83,1,-89,-67, 
  /* [42][0][][] */ -110,47,83,127,-65,-94,-70,5, 
  /* [43][0][][] */ 53,-105,82,31,-100,20,127,58, 
  /* [44][0][][] */ -12,-22,45,-85,-39,127,67,16, 
  /* [45][0][][] */ -47,50,-39,7,75,-42,-127,-40, 
  /* [46][0][][] */ -108,-105,-11,-18,17,127,-42,-122, 
  /* [47][0][][] */ -88,-67,-17,23,-10,127,-4,-67, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0031568657141178846, 0.0031010110396891832, 0.0014069355092942715, 0.0021719846408814192, 0.0013797942083328962, 0.0020737233571708202, 0.0022370219230651855, 0.00054467353038489819, 0.0021610998082906008, 0.0012715014163404703, 0.0023244882468134165, 0.002824168186634779, 0.0018275759648531675, 0.0026175342500209808, 0.0013576897326856852, 0.0017468285514041781, 0.0015159979229792953, 0.00035928425495512784, 0.0024195376317948103, 0.0025880257599055767, 0.0020921274553984404, 0.0015561874024569988, 0.0019330413779243827, 0.0022392862010747194, 0.0017955055227503181, 0.0025690717156976461, 0.001847323845140636, 0.0015659390483051538, 0.0022198748774826527, 0.0013471386628225446, 0.0016720914281904697, 0.0027948070783168077, 0.0013278683181852102, 0.0017870698357000947, 0.0014354129089042544, 0.00166937499307096, 0.0011050326284021139, 0.0020037374924868345, 0.0017579337581992149, 0.0026941944379359484, 0.0024746316485106945, 0.00069164269370958209, 0.0022675481159240007, 0.0020637079142034054, 0.0012692406307905912, 0.0022997218184173107, 0.0021616346202790737, 0.0015303295804187655, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -6319, 2287, -11072, 5744, 3350, -2064, 8117, 1938, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 8.9656197815202177e-05, 0.00011839667422464117, 4.5598455471917987e-05, 0.00010144878615392372, 0.00011575645476114005, 9.216313628712669e-05, 0.0001379804452881217, 0.00012821913696825504, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 38,48,28,27,11,-11,48,56,-29,39,-5,1,54,-19,25,-33,-59,-24,-127,9,49,-48,-2,24,10,2,55,10,-20,-41,-2,35,-44,63,45,1,76,80,-76,-33,4,40,-106,-47,57,40,-6,-42, 
  /* [1][0][][] */ -42,-59,9,92,-48,-3,-25,-27,47,7,-21,-51,-17,-24,42,29,56,18,81,-66,11,45,57,-46,17,-10,-46,-46,-17,-5,-11,-6,-39,-48,-100,89,11,12,-127,-52,29,-43,92,20,101,-38,-73,46, 
  /* [2][0][][] */ -2,11,33,-37,-23,-32,-12,126,-22,64,-50,-21,127,-9,47,-24,-58,-64,-9,47,-24,-37,29,7,-5,48,-5,51,10,10,69,23,-59,-21,35,44,-1,74,61,-110,24,21,-28,-24,13,40,-5,-6, 
  /* [3][0][][] */ 45,8,-127,-21,34,8,71,-23,-55,-3,-1,25,-29,-36,12,4,6,50,-10,49,-41,14,-82,-24,-56,-53,45,15,-80,-40,-65,18,74,55,-43,15,-30,-2,4,9,28,-38,-18,17,73,-28,62,-16, 
  /* [4][0][][] */ 11,41,-15,6,14,-3,-51,-102,-45,27,-26,87,13,-15,-1,53,44,51,-87,5,39,10,-32,-14,48,-5,7,6,-22,3,17,-18,34,-17,-127,41,-12,-1,12,56,-29,-32,61,50,14,-67,29,17, 
  /* [5][0][][] */ -29,-13,84,23,73,22,48,1,-127,11,-87,6,-53,-86,24,62,-12,24,4,22,33,14,14,20,-23,-1,-4,-29,-49,3,-27,-33,-35,22,47,14,-3,49,-40,8,25,-18,-53,28,7,26,39,8, 
  /* [6][0][][] */ 66,47,1,40,10,-31,-116,-73,24,-3,-6,68,-32,-42,21,45,-37,32,36,-17,127,-8,84,115,21,-52,4,-29,-26,-40,-26,-56,48,-48,36,-15,-12,28,-20,13,-51,-61,-56,-44,-36,-59,28,-4, 
  /* [7][0][][] */ 13,42,49,-60,70,-38,-40,-7,1,17,25,23,-33,-11,30,-12,-17,36,6,55,-71,-12,-17,63,30,-7,-21,36,-12,22,-29,-28,42,-21,-40,-40,-72,16,127,-7,7,-15,-31,-13,55,5,69,-18, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0038103882689028978, 0.0050318585708737373, 0.0019379343139007688, 0.0043115732260048389, 0.004919649101793766, 0.0039169332012534142, 0.0058641685172915459, 0.0054493132047355175, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { 1202, -5947, 2347, 292, -372, -1882, 2408, 10801, -122, 9055, 9819, -4905, 8509, 1133, -2279, -17, 2824, 1985, -472, -1943, -6180, -7309, -9489, -6510, 5436, 560, -3075, 620, 5146, 3773, 8997, -1674, -14866, -384, -1312, -4796, 2875, 4673, 2826, 10971, -1654, 65, -4250, -1150, -5709, 13654, 700, 7121, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 3.8179361581569538e-05, 0.0001608993043191731, 0.00024523874162696302, 0.00031367651536129415, 0.00021955542615614831, 0.00020685986964963377, 0.00031226934515871108, 0.00046085444046184421, 0.00022138490749057382, 0.00010312664380762726, 0.0001172863703686744, 0.00018119695596396923, 0.00012578906898852438, 0.00035548669984564185, 0.00011094442015746608, 0.00035724369809031487, 0.00054912501946091652, 0.00023004991817288101, 0.00014502881094813347, 0.00021543494949582964, 0.00017181556904688478, 0.00011634022666839883, 0.00012619289918802679, 0.00033609566162340343, 0.00014493404887616634, 0.00017917741206474602, 0.0001512558083049953, 0.00013468459655996412, 0.00020947244775015861, 0.00010262671275995672, 0.00012463159509934485, 0.00011652889952529222, 9.6133910119533539e-05, 0.00022798650024924427, 0.00061235448811203241, 0.00013356682029552758, 0.00012861979485023767, 0.00015092990361154079, 0.00021141239267308265, 0.00011099348921561614, 0.00030885764863342047, 0.00027372181648388505, 0.00028692182968370616, 0.00030343927210196853, 0.00024433466023765504, 9.764843707671389e-05, 0.00026151360361836851, 9.0658082626760006e-05, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 45,102,47,42,0,-127,39,29,-80,-43,21,38,51,-4,53,24,37,-51,53,70,122,44,-2,10,-13,-83,57,27,-5,-45,55,42,42,-125,44,23,-26,44,-21,-105,-3,-107,-43,-29,8,-107,105,-127, 65,29,48,-75,43,102,57,-60,-127,-127,-8,127,17,-66,-124,36,-7,63,41,-22,33,127,49,5,127,-60,-5,-110,-70,-5,-123,127,29,-59,-86,127,53,-64,-127,-77,11,127,-57,22,-49,-78,38,12, 57,28,14,-88,-6,-100,40,41,-79,-7,31,39,33,22,107,-10,-64,-5,127,65,-23,13,-68,-5,-26,-61,10,-11,-7,-88,30,-7,127,-35,38,34,-47,-26,-34,-105,10,-41,127,-16,10,-66,28,-115, 
  /* [0][1][][] */ 127,-32,31,28,27,95,-14,-127,103,-78,-127,-43,9,28,-36,127,-127,82,27,50,44,119,88,-16,-16,109,68,45,28,-16,-127,43,91,65,-68,22,-76,30,-41,-57,-1,-50,7,-91,47,-82,10,-38, 43,127,-127,64,127,122,-127,10,70,8,-103,83,-127,127,-24,-3,44,-127,-121,44,76,28,127,-80,-52,88,-65,18,-17,-28,15,-21,96,2,98,-83,76,-80,103,127,127,80,-105,-5,108,27,-127,-37, 74,52,0,-127,23,47,2,-64,99,8,-124,-5,23,47,-32,79,63,-13,26,69,22,-114,19,127,-58,127,8,9,46,-103,-39,50,27,72,127,50,-56,10,-100,-47,-8,-24,109,127,127,-23,45,35, 
  /* [0][2][][] */ 81,43,33,29,20,-9,14,33,-20,-11,52,13,41,-85,103,-57,-13,-4,72,-64,127,52,-26,-54,-97,-76,127,127,-6,-86,-70,60,71,43,-1,20,-74,15,-37,13,3,-84,34,3,-5,-28,10,-40, 35,6,11,17,29,-122,-5,-91,-83,-12,-65,-11,3,-63,10,-9,8,-70,18,119,47,106,37,65,2,-56,-35,97,-127,-28,-78,20,-45,127,-60,32,-90,-127,-7,11,-80,114,-4,8,-58,-127,50,-106, 32,68,20,-45,-3,-16,34,58,-14,36,0,14,44,-51,127,-39,-6,-40,72,-127,39,-18,-46,62,-28,-71,-35,87,-4,-127,52,49,103,-15,3,66,-127,-44,-72,-35,-13,-15,1,-27,-20,15,-20,-75, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0016226228326559067, 0.0068382201716303825, 0.010422646068036556, 0.013331251218914986, 0.0093311052769422531, 0.0087915444746613503, 0.013271446339786053, 0.019586313515901566, 0.0094088586047291756, 0.0043828822672367096, 0.0049846707843244076, 0.0077008707448840141, 0.0053460351191461086, 0.015108184888958931, 0.0047151376493275166, 0.015182856470346451, 0.023337813094258308, 0.0097771212458610535, 0.0061637242324650288, 0.0091559849679470062, 0.007302161306142807, 0.0049444595351815224, 0.00536319799721241, 0.014284064993262291, 0.0061596971936523914, 0.0076150395907461643, 0.006428371649235487, 0.0057240952737629414, 0.0089025786146521568, 0.0043616350740194321, 0.0052968426607549191, 0.0049524782225489616, 0.0040856911800801754, 0.0096894260495901108, 0.026025064289569855, 0.0056765899062156677, 0.0054663410410284996, 0.0064145210199058056, 0.0089850267395377159, 0.0047172233462333679, 0.013126449659466743, 0.011633177287876606, 0.012194177135825157, 0.012896168977022171, 0.01038422342389822, 0.0041500586085021496, 0.011114328168332577, 0.0038529683370143175, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { -1145, -1170, 3680, -170, -2283, 1310, 2342, 17069, 2160, 2797, 3786, 2147, 2253, 6090, 3511, -2636, 17140, 3267, 2028, -2998, 1210, -288, 1118, 7540, 197, 5633, 1793, -391, 4226, -183, 1518, -931, -1420, -1371, -6420, 3497, 2445, 1128, 2366, 1754, 2365, 124, 4090, 1834, 10419, 4601, -2424, 319, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00020341272465884686, 0.00034563432564027607, 0.0001984027330763638, 0.00023370431154035032, 0.00024389856844209135, 0.00014615205873269588, 0.00022326296311803162, 7.0691014116164297e-05, 0.00015130997053347528, 0.00021887956245336682, 0.00015395703667309135, 0.00020051487081218511, 0.00015817325038369745, 0.00014226380153559148, 0.00016699159459676594, 0.00017651163216214627, 5.9584897826425731e-05, 0.000122793935588561, 0.00022292480571195483, 0.00020015570044051856, 0.00015889226051513106, 0.00036955816904082894, 0.00022680262918584049, 0.00012432332732714713, 0.00036552312667481601, 0.00011888521112268791, 0.00023799893097020686, 0.00027481507277116179, 0.00011176936095580459, 0.00023717079602647573, 0.00013561079686041921, 0.00036605031345970929, 0.00024709594435989857, 0.00017242194735445082, 9.956656867871061e-05, 0.00016165636770892888, 0.00017632226808927953, 0.00026474145124666393, 0.00022245844593271613, 0.00021486733749043196, 0.00028409602236934006, 0.00027639474137686193, 0.00019455468282103539, 0.00024217006284743547, 8.0993340816348791e-05, 0.00014980295964051038, 0.00012621025962289423, 0.00035057775676250458, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -39,-35,-54,118,9,-65,-109,-127, 
  /* [1][0][][] */ 127,-23,31,-31,32,-83,0,31, 
  /* [2][0][][] */ -9,34,5,-127,-12,88,-28,43, 
  /* [3][0][][] */ -6,127,-37,-54,-95,17,29,-55, 
  /* [4][0][][] */ -12,-62,-96,-49,13,-80,-44,-127, 
  /* [5][0][][] */ -22,-78,119,26,34,81,67,-127, 
  /* [6][0][][] */ 4,-2,-39,47,36,-4,-127,-25, 
  /* [7][0][][] */ 12,-10,18,19,-45,80,127,51, 
  /* [8][0][][] */ -10,4,-108,-24,-55,-127,-71,64, 
  /* [9][0][][] */ 75,-17,-37,-46,2,127,-28,80, 
  /* [10][0][][] */ -13,44,89,119,112,127,-5,-46, 
  /* [11][0][][] */ -17,-46,9,46,-127,71,-10,-20, 
  /* [12][0][][] */ 14,39,114,-55,41,-101,-127,-87, 
  /* [13][0][][] */ 61,6,-76,-110,-29,-21,-37,127, 
  /* [14][0][][] */ 6,-99,29,-40,-12,-43,15,-127, 
  /* [15][0][][] */ -11,86,46,85,93,127,-14,-38, 
  /* [16][0][][] */ 54,51,-28,-122,81,127,-119,87, 
  /* [17][0][][] */ -61,77,-127,33,34,83,-95,51, 
  /* [18][0][][] */ -127,74,3,-19,-99,-4,-21,16, 
  /* [19][0][][] */ 127,6,-65,-12,124,-106,47,-75, 
  /* [20][0][][] */ 127,-114,34,3,-69,-2,122,37, 
  /* [21][0][][] */ 34,-37,-21,40,-9,38,127,28, 
  /* [22][0][][] */ 87,45,-120,-56,47,127,48,111, 
  /* [23][0][][] */ -43,62,-24,-116,2,48,-127,13, 
  /* [24][0][][] */ 114,-56,-108,-78,127,-68,44,-28, 
  /* [25][0][][] */ -15,-88,70,-56,47,127,0,-71, 
  /* [26][0][][] */ 41,-69,61,1,127,-56,-28,-62, 
  /* [27][0][][] */ 0,-102,68,103,31,38,-16,127, 
  /* [28][0][][] */ -12,67,-85,-71,111,-76,-6,127, 
  /* [29][0][][] */ -95,0,127,-100,39,-23,46,37, 
  /* [30][0][][] */ 127,-81,76,-50,-92,-109,70,-78, 
  /* [31][0][][] */ 6,19,33,11,-16,-15,-127,18, 
  /* [32][0][][] */ 3,-5,1,127,-24,-95,-46,-89, 
  /* [33][0][][] */ 69,-127,-80,106,-105,93,-26,-8, 
  /* [34][0][][] */ -7,-72,22,-51,-119,127,72,-1, 
  /* [35][0][][] */ 48,127,94,14,9,26,-76,-18, 
  /* [36][0][][] */ 39,92,-53,-127,-54,30,63,-76, 
  /* [37][0][][] */ 59,36,33,18,46,127,59,35, 
  /* [38][0][][] */ -77,-47,89,40,23,-17,-50,127, 
  /* [39][0][][] */ 2,35,127,-65,-20,39,-29,13, 
  /* [40][0][][] */ 6,-13,2,-8,3,-22,127,3, 
  /* [41][0][][] */ -31,3,-91,-127,-98,-57,-82,47, 
  /* [42][0][][] */ 18,1,43,-30,-127,-62,-51,34, 
  /* [43][0][][] */ 65,-20,47,21,-76,-88,127,25, 
  /* [44][0][][] */ -61,-125,3,-83,-30,43,8,-127, 
  /* [45][0][][] */ 36,90,84,55,24,127,-54,34, 
  /* [46][0][][] */ -120,-4,13,41,127,13,-79,112, 
  /* [47][0][][] */ 48,77,-76,-46,21,-44,6,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0025759751442819834, 0.0043770391494035721, 0.0025125297252088785, 0.0029595813248306513, 0.003088679164648056, 0.0018508384237065911, 0.0028273542411625385, 0.00089521589688956738, 0.0019161569653078914, 0.0027718439232558012, 0.0019496789900586009, 0.0025392773095518351, 0.0020030720625072718, 0.0018015982350334525, 0.0021147457882761955, 0.0022353054955601692, 0.00075457035563886166, 0.0015550360549241304, 0.0028230720199644566, 0.0025347289629280567, 0.0020121776033192873, 0.0046800053678452969, 0.0028721799608319998, 0.0015744039556011558, 0.0046289064921438694, 0.0015055368421599269, 0.0030139675363898277, 0.0034801990259438753, 0.0014154232339933515, 0.0030034801457077265, 0.0017173461383208632, 0.0046355826780200005, 0.0031291700433939695, 0.0021835146471858025, 0.0012608896940946579, 0.0020471815951168537, 0.0022329073399305344, 0.0033526290208101273, 0.0028171660378575325, 0.0027210339903831482, 0.0035977312363684177, 0.0035002038348466158, 0.0024637987371534109, 0.0030667898245155811, 0.0010256823152303696, 0.0018970725359395146, 0.0015982995973899961, 0.0044396417215466499, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { 14073, 4951, 14528, -7868, -11160, 11132, 8473, 17970, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 6.4441352151334286e-05, 6.3747342210263014e-05, 6.9874156906735152e-05, 8.78996288520284e-05, 9.4149021606426686e-05, 0.00011565397289814427, 5.1855757192242891e-05, 5.666292054229416e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-59,9,1,-21,-107,-18,-18,46,-28,-37,-41,-41,82,-34,12,8,-6,6,-13,30,-34,14,9,59,-9,11,18,31,38,-45,-102,41,-47,-8,-47,41,-56,-5,2,-56,-27,-5,-40,-98,-116,17,-34, 
  /* [1][0][][] */ -62,19,51,-60,53,34,24,32,-19,1,-6,94,30,-17,-127,-62,-85,-82,20,0,4,86,-58,3,1,-81,42,100,27,-7,26,46,16,31,24,48,-58,-9,34,48,-5,-30,-109,24,8,-26,-100,44, 
  /* [2][0][][] */ 83,51,-17,-57,-44,-7,-42,-79,30,32,-76,-60,-13,57,-54,51,-22,79,10,12,52,51,-12,-2,-115,6,24,-48,-17,42,40,-73,9,-66,32,11,-46,-57,21,62,-127,-102,-30,-53,-40,-72,30,35, 
  /* [3][0][][] */ 14,-6,35,33,-106,-26,8,48,-28,-42,0,68,-2,-8,-64,-24,-34,31,9,-70,-47,127,20,-46,43,36,44,-68,31,5,15,15,60,32,-28,-14,55,43,6,-41,47,-10,40,-43,-45,-14,30,40, 
  /* [4][0][][] */ -50,5,-119,19,-6,69,35,45,-36,127,43,56,9,-57,-2,40,-23,-8,-10,-4,-4,45,-57,-1,5,-18,38,-4,43,-74,101,82,61,42,-29,-42,-69,5,36,-39,39,20,31,60,23,-14,11,80, 
  /* [5][0][][] */ -37,-11,68,-14,65,-77,-78,-48,-48,-73,0,-51,50,7,-11,20,27,-1,-6,45,18,47,31,29,16,-5,-38,-33,-30,16,-127,-37,-29,-29,51,-30,1,-44,-4,-5,-21,-7,-44,-24,54,42,0,45, 
  /* [6][0][][] */ 8,51,-26,62,-15,33,-94,52,-94,-48,41,7,47,-3,33,11,-4,-50,-56,57,0,76,23,-34,-108,-5,-21,28,-94,12,-104,20,-24,-38,-17,-42,127,8,-26,-14,41,24,31,-86,-58,-2,-69,-37, 
  /* [7][0][][] */ -62,35,-63,38,-24,-3,-33,-29,-70,-61,30,51,68,1,-63,-65,-75,83,-10,-23,59,10,51,-45,-64,102,-61,-108,-48,-12,-118,-16,-23,-59,-39,3,-50,-39,-60,-12,-30,49,60,-19,-41,-50,127,-85, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0027387575246393681, 0.0027092620730400085, 0.0029696517158299685, 0.003735734149813652, 0.0040013333782553673, 0.0049152937717735767, 0.0022038696333765984, 0.0024081740994006395, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 8129, 991, 17019, 12453, 29303, -2284, 2911, 870, -4399, -3296, -4064, -2542, 7181, 10382, 8005, 2212, 5367, 15182, 224, -1975, 5642, -2564, 9352, -869, 12836, 9089, 2470, -1954, -2706, 2920, 9882, 6595, 2299, 103, -1654, 4383, 3015, 6128, 5078, 1143, 19185, -8923, 10210, 1714, -2552, 412, 9618, -1365, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00019780769071076065, 0.00031742578721605241, 4.7136014472926036e-05, 9.9438817414920777e-05, 5.6412733101751655e-05, 0.00027709975256584585, 0.00022902812634129077, 0.00031003521871753037, 0.00025511320563964546, 0.00028434995329007506, 7.3258343036286533e-05, 0.00017357470642309636, 0.00015088375948835164, 9.3847396783530712e-05, 0.00014199288852978498, 0.00014075581566430628, 0.00014097488019615412, 0.00011382061347831041, 0.00034130315179936588, 0.00028535583987832069, 0.00015439085836987942, 0.00012888961646240205, 8.7749154772609472e-05, 0.00013932511501479894, 0.00014744991494808346, 0.00014033124898560345, 0.00042582445894367993, 0.0003318788658361882, 0.00026948575396090746, 0.00013532394950743765, 0.00014961451233830303, 0.000287215894786641, 0.00032264104811474681, 0.000512429338414222, 0.00014534303045365959, 0.00021138055308256298, 0.00027239794144406915, 7.579055818496272e-05, 0.0001552616449771449, 0.0002560015709605068, 7.5946460128761828e-05, 0.00011437233479227871, 0.00020485241839196533, 0.00039398687658831477, 0.00024297842173837125, 0.00021817277593072504, 0.0001549349253764376, 0.00025318501866422594, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -98,-9,88,-38,-80,5,-127,-29,18,127,39,4,-35,56,-26,36,49,-2,15,-67,-127,4,-54,51,-84,-4,6,-68,40,-110,61,25,-19,58,52,-38,54,-127,-34,104,-97,41,-39,-6,-15,24,-12,-11, 2,-127,-28,2,18,27,-110,-28,43,31,127,118,-20,-32,-127,-72,13,-60,106,12,-7,72,-105,11,-107,8,-2,-127,37,-72,-48,-127,10,28,-32,-127,13,22,5,98,127,-4,-36,127,-3,-127,-11,3, -82,-32,52,-11,-45,14,-69,-28,-10,61,39,-8,-44,47,-7,24,-2,-31,11,-61,-88,-22,94,32,-18,-3,11,-36,-34,-127,34,-31,-21,16,-27,-35,50,-106,22,99,-93,45,-28,-4,17,17,-12,64, 
  /* [0][1][][] */ 19,23,63,-7,-83,18,35,-21,-28,30,21,41,-59,-43,-91,127,-8,-5,43,127,21,24,-127,-9,-51,-127,-5,-91,127,7,61,117,-127,1,105,-5,2,0,-127,-127,44,-9,18,1,-126,60,23,-64, 85,17,-127,-127,127,127,-8,127,-121,-87,-16,127,-19,-127,-87,-125,-10,-127,-86,38,115,127,-83,101,-127,46,-127,124,-50,-71,-127,-66,19,127,-127,86,-127,-109,111,-50,-54,127,-127,-72,127,108,-127,-60, 30,34,89,-14,-25,-56,6,-37,-39,-13,44,-48,-17,-83,-71,87,-127,-67,23,118,22,29,-9,-127,1,-64,105,-15,-60,125,-57,75,66,-52,-32,5,-8,-51,-24,-63,41,-10,-16,-15,23,49,-40,127, 
  /* [0][2][][] */ -127,41,21,-9,-97,24,47,-5,127,10,41,21,-80,56,13,-6,72,22,7,121,-56,-27,32,23,-36,3,-7,29,15,28,101,-10,-7,-22,72,0,25,-67,-54,8,-107,13,1,-28,-6,3,-23,-12, -75,-31,49,-27,-58,-15,99,-15,105,-17,103,-47,127,-107,-45,-24,-45,4,-127,64,-78,20,-88,-17,45,-98,-20,72,23,12,7,-64,14,-87,-31,3,-8,72,34,-67,-31,6,27,-38,33,-11,-19,12, -72,30,-2,-6,-68,67,38,-4,48,-37,46,42,-47,17,13,-23,-52,15,4,24,7,-32,117,-85,-22,9,-7,48,-16,58,20,-43,-9,2,-25,-4,32,-21,-21,-36,-72,43,14,4,12,2,-17,8, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.010424003005027771, 0.016727596521377563, 0.0024839576799422503, 0.0052401931025087833, 0.0029728191439062357, 0.014602509327232838, 0.012069246731698513, 0.016338130459189415, 0.013443869538605213, 0.014984577894210815, 0.0038605434820055962, 0.0091469809412956238, 0.0079512214288115501, 0.0049455384723842144, 0.0074826930649578571, 0.0074175023473799229, 0.007429046556353569, 0.0059980801306664944, 0.017985878512263298, 0.015037585981190205, 0.0081360368058085442, 0.006792181171476841, 0.0046241753734648228, 0.0073421075940132141, 0.0077702654525637627, 0.0073951287195086479, 0.022439952939748764, 0.017489239573478699, 0.0142012694850564, 0.0071312556974589825, 0.0078843347728252411, 0.015135605819523335, 0.017002427950501442, 0.027003828436136246, 0.0076592373661696911, 0.011139260604977608, 0.014354733750224113, 0.0039939852431416512, 0.0081819258630275726, 0.013490684330463409, 0.0040022009052336216, 0.0060271546244621277, 0.010795243084430695, 0.020762186497449875, 0.012804394587874413, 0.011497194878757, 0.0081647085025906563, 0.013342257589101791, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 4027, -538, 1092, 1896, 3857, 1583, 8972, -757, 5958, 7822, -1833, 876, 2559, 878, 104, 3033, 3626, 3081, -1295, -4636, 2560, 2636, 1956, -171, 4330, 2020, 7239, -959, 4679, -176, 2364, 8125, 6971, -162, 674, 2940, 3629, 1400, 1698, 1341, 50, 3215, 3010, 5435, 6320, 1937, 240, 2150, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00019188167061656713, 0.00028085088706575334, 0.00032929843291640282, 0.00022200973762664944, 0.0001793203700799495, 0.00013246778689790517, 7.8846351243555546e-05, 0.00028547688270919025, 0.00013577147910837084, 9.2776397650595754e-05, 0.00011748605902539566, 0.00016989343566820025, 0.00019814893312286586, 0.00027580547612160444, 0.00010196247603744268, 0.00024522046442143619, 0.00014827281120233238, 0.00024261100043077022, 0.00025401942548342049, 8.0498786701355129e-05, 0.00026045565027743578, 0.00011029996676370502, 0.00025715568335726857, 0.00025828194338828325, 0.00016297925321850926, 0.00034482459886930883, 0.0001227102184202522, 0.0003160657943226397, 0.00019513793813530356, 0.00017071625916287303, 0.00027401430997997522, 9.0331122919451445e-05, 0.00013666250742971897, 0.00013843430497217923, 0.00031800993019714952, 0.00027321249945089221, 0.00020946681615896523, 0.00027865092852152884, 0.00031567364931106567, 0.00017601628496777266, 0.00034720683470368385, 0.00020063281408511102, 0.00030329689616337419, 0.00011763296788558364, 0.0001357624278170988, 0.00014033245679456741, 0.00026273966068401933, 0.00027848102035932243, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 29,-30,20,-22,20,-127,23,-56, 
  /* [1][0][][] */ -71,-64,-80,59,-127,6,-18,6, 
  /* [2][0][][] */ 94,-41,86,-58,127,-19,13,60, 
  /* [3][0][][] */ 7,127,-26,123,24,-7,-56,-41, 
  /* [4][0][][] */ -57,127,68,-36,65,55,-95,52, 
  /* [5][0][][] */ -93,53,-2,44,127,-13,92,6, 
  /* [6][0][][] */ 117,-105,127,27,27,114,71,-43, 
  /* [7][0][][] */ -33,-54,67,64,82,28,-65,127, 
  /* [8][0][][] */ 10,-32,-7,-44,4,127,-45,6, 
  /* [9][0][][] */ -127,42,-114,12,71,-45,-75,15, 
  /* [10][0][][] */ -2,-70,81,11,-62,-80,-127,-120, 
  /* [11][0][][] */ 41,65,-31,8,-20,-90,16,127, 
  /* [12][0][][] */ 40,-73,-123,53,-90,127,43,101, 
  /* [13][0][][] */ -49,-24,-127,13,-111,93,21,46, 
  /* [14][0][][] */ -63,127,-103,79,123,47,-39,99, 
  /* [15][0][][] */ -111,-8,-24,16,97,102,-59,-127, 
  /* [16][0][][] */ 74,-127,-119,-58,-104,105,-51,-6, 
  /* [17][0][][] */ 37,125,-82,-63,-78,62,49,-127, 
  /* [18][0][][] */ -59,-85,32,32,127,-54,-40,75, 
  /* [19][0][][] */ -96,127,-23,65,23,-108,-86,91, 
  /* [20][0][][] */ 49,-21,12,-38,4,-102,1,127, 
  /* [21][0][][] */ 105,-72,127,101,-67,121,78,-70, 
  /* [22][0][][] */ -3,127,21,7,101,-29,-101,-35, 
  /* [23][0][][] */ 26,-56,0,127,-7,-108,86,-23, 
  /* [24][0][][] */ -47,84,127,-91,1,-45,44,-26, 
  /* [25][0][][] */ -55,-107,102,79,26,10,-28,127, 
  /* [26][0][][] */ 28,-6,-127,-50,-91,16,16,85, 
  /* [27][0][][] */ 62,101,-59,-70,-51,43,19,-127, 
  /* [28][0][][] */ -11,25,-49,-62,-28,-16,-127,-30, 
  /* [29][0][][] */ -69,44,-127,-29,104,36,-39,7, 
  /* [30][0][][] */ 51,-21,-16,-3,-89,127,83,64, 
  /* [31][0][][] */ -68,71,-39,124,127,-63,-37,-12, 
  /* [32][0][][] */ -13,79,46,-38,127,-100,-13,-94, 
  /* [33][0][][] */ -127,61,-122,14,39,6,-29,15, 
  /* [34][0][][] */ 46,-7,34,-75,-15,-127,67,110, 
  /* [35][0][][] */ -127,2,37,25,-93,-14,0,8, 
  /* [36][0][][] */ 4,-41,-13,42,14,10,127,36, 
  /* [37][0][][] */ -25,-42,-82,-51,-32,-127,-68,-20, 
  /* [38][0][][] */ -127,1,41,8,-118,9,52,-3, 
  /* [39][0][][] */ 0,-15,15,-57,-18,85,-127,-53, 
  /* [40][0][][] */ 86,-127,17,49,-26,-55,84,43, 
  /* [41][0][][] */ 13,127,87,33,16,37,-79,-34, 
  /* [42][0][][] */ 52,127,-30,-12,-13,10,-20,-47, 
  /* [43][0][][] */ -25,80,-127,-95,52,26,-119,107, 
  /* [44][0][][] */ -79,66,-19,6,47,127,5,1, 
  /* [45][0][][] */ -18,88,-97,-66,-53,-62,13,127, 
  /* [46][0][][] */ 47,119,-80,-41,-65,53,-4,-127, 
  /* [47][0][][] */ 38,5,-31,-35,-53,-127,-36,37, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0025499584153294563, 0.003732290118932724, 0.0043761203996837139, 0.002950337016955018, 0.0023830283898860216, 0.0017603940796107054, 0.0010478068143129349, 0.0037937662564218044, 0.0018042975571006536, 0.0012329262681305408, 0.0015612985007464886, 0.0022577517665922642, 0.0026332454290241003, 0.0036652407143265009, 0.0013550021685659885, 0.003258789423853159, 0.0019704306032508612, 0.0032241118606179953, 0.0033757209312170744, 0.0010697663528844714, 0.0034612533636391163, 0.0014658009167760611, 0.0034173994790762663, 0.003432366531342268, 0.0021658677142113447, 0.0045824511907994747, 0.0016307234764099121, 0.0042002690024673939, 0.0025932316202670336, 0.0022686864249408245, 0.0036414372734725475, 0.0012004304444417357, 0.0018161386251449585, 0.001839684322476387, 0.0042261048220098019, 0.0036307817790657282, 0.0027836512308567762, 0.0037030545063316822, 0.004195057787001133, 0.002339119790121913, 0.0046141091734170914, 0.0026662542950361967, 0.0040305801667273045, 0.0015632507856935263, 0.0018041773000732064, 0.0018649093108251691, 0.0034916060976684093, 0.003700796514749527, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 7446, -1461, -1371, 4877, 342, -19805, -5764, -5390, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00015125813661143184, 0.00010996972559951246, 0.00023785067605786026, 0.00017452456813771278, 0.00017444735567551106, 8.1757214502431452e-05, 0.00010210827167611569, 0.00014746577653568238, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -20,14,-3,24,-29,11,-5,26,-52,-8,-41,1,-7,24,30,0,-48,-12,24,-16,-37,127,-21,-13,-13,-31,9,21,-38,42,0,-25,-2,29,33,40,22,-5,19,-27,1,-32,-19,-8,-28,22,13,9, 
  /* [1][0][][] */ 11,63,1,60,43,34,53,120,-54,-53,92,-33,-53,-42,31,-10,-24,-2,47,6,40,-127,-13,-79,4,13,-10,15,-6,8,-40,-64,-46,4,26,-14,22,74,66,-15,26,17,43,-31,-26,51,14,46, 
  /* [2][0][][] */ 0,29,-8,28,27,19,-33,32,22,14,61,23,18,-13,41,-59,17,27,-8,4,-23,127,4,-7,18,-49,7,1,-30,26,-10,-55,-10,22,24,-42,25,-18,-35,-31,27,-13,-10,-47,-36,41,11,12, 
  /* [3][0][][] */ -42,48,-5,3,-36,37,65,2,-10,14,-5,27,-5,48,39,9,-22,9,-7,0,33,-92,3,24,-9,10,-127,26,-36,-22,-15,7,-33,-5,8,37,43,-20,-46,-32,3,-27,10,16,14,-18,38,14, 
  /* [4][0][][] */ 23,6,-38,3,23,-9,22,-12,-56,9,2,19,9,-3,-16,10,-19,35,-22,-5,-2,-127,-1,-12,41,43,31,-46,43,2,-6,-2,-18,52,31,-12,-16,10,-5,7,-1,-64,-79,26,25,22,6,-12, 
  /* [5][0][][] */ -7,60,63,4,-10,24,13,-112,72,-23,-21,0,120,-59,-31,7,-6,-25,52,50,-50,122,36,5,105,2,104,63,127,70,-18,-54,-74,-36,121,53,-60,-85,-6,-123,18,-39,67,91,-50,-53,-61,-41, 
  /* [6][0][][] */ 68,2,-34,21,63,-20,48,-50,61,33,10,-36,-31,30,29,-65,22,-127,-11,-23,45,-17,-24,21,-54,-48,50,-12,64,-54,126,49,39,44,43,-65,-75,19,53,-29,-28,21,-82,73,45,20,52,-49, 
  /* [7][0][][] */ -28,40,37,33,-19,17,46,77,52,38,-3,54,-47,-1,26,-26,79,-1,-35,2,0,-127,2,-85,-61,74,36,26,15,9,25,-31,1,-34,6,24,-28,82,-71,-27,2,-14,34,-3,-28,-2,31,-1, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0064284708350896835, 0.0046737133525311947, 0.010108653455972672, 0.0074172941967844963, 0.0074140122160315514, 0.0034746814053505659, 0.0043396013788878918, 0.0062672956846654415, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 30035, 22270, 8237, 14913, 4361, 7602, 18598, -1480, 39958, -1558, -3275, 16989, 16309, -3840, 7163, 3988, 3187, 36889, 16560, 4093, 3711, -169, 217, -3704, 31185, 40330, -444, 1883, -84, 13823, -1238, 1968, -13656, 18021, 16594, 31346, 23725, 23359, 1141, 955, 4066, 44592, -4089, -110, 705, -1087, 16940, 4347, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 3.3406748116249219e-05, 8.335045276908204e-05, 7.4539791967254132e-05, 8.6232692410703748e-05, 0.00015584858192596585, 7.1076756285037845e-05, 0.0001760675513651222, 8.7503722170367837e-05, 4.3985000957036391e-05, 0.00012231513392180204, 9.4011375040281564e-05, 6.7696797486860305e-05, 0.00011995257227681577, 5.6960467190947384e-05, 8.5082036093808711e-05, 7.1992108132690191e-05, 2.6923431505565532e-05, 6.1447732150554657e-05, 6.7498491262085736e-05, 0.0001461440697312355, 9.6336356364190578e-05, 0.00035957229556515813, 0.00032915486372075975, 0.00013832333206664771, 5.3807270887773484e-05, 7.2261311288457364e-05, 8.7827378592919558e-05, 6.422741716960445e-05, 5.5053671530913562e-05, 9.0966772404499352e-05, 0.00016384145419578999, 0.0001926127151818946, 6.3216328271664679e-05, 8.1911697634495795e-05, 0.00013316872355062515, 9.549761307425797e-05, 0.00011491835175547749, 0.00014858998474664986, 7.1558650233782828e-05, 7.2055241616908461e-05, 0.00011931896733585745, 3.1412047974299639e-05, 9.3436770839616656e-05, 6.3040904933586717e-05, 0.00043887502397410572, 0.00012572231935337186, 7.7410353696905077e-05, 5.5433891247957945e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -69,-54,-34,-127,20,15,-42,-4,-58,43,59,-110,-98,40,7,25,125,-94,-73,92,30,34,-41,104,-45,-59,56,35,31,-46,84,30,10,-94,-78,-75,-122,-77,113,32,58,5,23,75,63,121,-21,-35, -65,-104,-81,-108,1,13,-73,-115,-83,73,99,-113,-127,65,-116,127,121,-73,-94,4,127,56,53,127,-58,-126,87,79,80,-89,93,51,69,-127,-83,-95,-127,-90,87,99,-18,-33,68,112,101,127,-97,-109, 0,-39,-54,-67,-111,44,-8,-5,-69,36,65,-53,-71,61,16,17,125,18,-40,-36,90,-127,-19,61,-20,-44,31,53,6,-60,71,85,43,-43,-19,-36,-49,-6,26,31,-4,-60,82,101,127,95,-33,-8, 
  /* [0][1][][] */ -87,-106,-84,-37,41,-15,-68,-29,-39,87,66,-127,-67,30,-107,12,68,-127,-95,71,93,49,-28,88,-59,-57,68,89,112,-80,62,77,43,-123,-92,-85,-98,-92,127,66,-38,-81,60,70,19,93,-60,-84, -127,-127,-127,-60,-62,-108,-127,-127,-127,127,127,-101,-77,50,-77,122,127,-112,-127,-28,102,65,127,110,-127,-127,127,127,111,-127,127,127,127,-109,-127,-127,-73,-127,89,127,-127,-127,127,127,-61,86,-127,-127, -22,-66,-86,-40,-127,-54,-88,-23,-30,19,58,-76,-56,127,-110,37,77,-60,-83,-127,104,-122,-58,36,-49,-61,45,29,127,-55,47,116,77,-58,-10,-60,-39,-61,71,47,-48,-79,101,34,72,-6,-35,-11, 
  /* [0][2][][] */ -100,17,-66,-67,-66,28,-17,-2,12,75,18,-51,18,68,-103,-26,71,-106,-27,-20,19,26,-5,91,3,10,18,-9,33,-55,31,12,12,-62,4,-63,-32,-27,22,4,-62,-80,47,-21,-58,92,-39,14, -50,5,-99,-48,-57,-127,-62,-92,-86,69,31,-12,3,118,-127,61,116,-97,8,-69,9,11,16,34,-3,-77,16,94,93,-29,51,32,54,-60,34,-76,-50,-45,-2,-14,-87,-31,71,48,-73,28,-43,-43, -34,15,-34,-24,-74,-123,-47,3,7,34,9,-41,16,29,-17,-23,69,-48,-46,-125,58,-63,-64,9,-16,-37,7,55,92,-1,17,52,38,-71,42,-30,-13,-23,27,-3,-58,-29,45,19,-94,55,15,-1, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0014197868295013905, 0.0035423941444605589, 0.0031679410021752119, 0.0036648893728852272, 0.0066235647536814213, 0.0030207622330635786, 0.0074828709475696087, 0.0037189081776887178, 0.001869362429715693, 0.0051983930170536041, 0.0039954832755029202, 0.0028771138750016689, 0.0050979843363165855, 0.0024208198301494122, 0.0036159863229840994, 0.0030596645083278418, 0.0011442458489909768, 0.0026115286163985729, 0.0028686858713626862, 0.0062111229635775089, 0.0040942952036857605, 0.01528182253241539, 0.013989081606268883, 0.0058787413872778416, 0.0022868090309202671, 0.0030711058061569929, 0.0037326635792851448, 0.0027296650223433971, 0.0023397810291498899, 0.0038660878781229258, 0.0069632618688046932, 0.0081860404461622238, 0.0026866940315812826, 0.0034812469966709614, 0.0056596705690026283, 0.0040586483664810658, 0.0048840297386050224, 0.0063150739297270775, 0.0030412424821406603, 0.003062347648665309, 0.0050710560753941536, 0.0013350120279937983, 0.0039710626006126404, 0.0026792383287101984, 0.018652187660336494, 0.0053431983105838299, 0.0032899400684982538, 0.0023559404071420431, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 767, 4351, 1645, -494, -913, 592, 8075, 2195, 1710, -2071, 919, 132, 4445, -55, 833, -2050, 212, 4431, 558, 1665, -1277, 82659, 2705, -1126, 812, 8357, 2047, -1121, 219, 297, -2294, -1243, 4629, 920, 4792, 9092, 4122, 8976, -3347, -734, -600, 1292, 1167, 366, -2804, -1740, 3088, 913, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00025144469691440463, 0.00018371065380051732, 0.00031825242331251502, 0.00033140677260234952, 0.00031180426594801247, 0.00024546240456402302, 0.00012648927804548293, 0.0002098733966704458, 0.0002094037045026198, 0.00020368490368127823, 0.00041092975880019367, 0.00026733733830042183, 0.00014729148824699223, 0.00046647861017845571, 0.00048448177403770387, 0.00021204407676123083, 0.00039223654312081635, 0.00017641946033108979, 0.0002708620741032064, 0.00022677780361846089, 0.00028929163818247616, 2.1069070498924702e-05, 0.00019360631995368749, 0.00021459419804159552, 0.00019842808251269162, 0.00011682062176987529, 0.00032196412212215364, 0.00030796014470979571, 0.00044183377758599818, 0.00036981015000492334, 0.00016893126303330064, 0.00023589766351506114, 0.00017733839922584593, 0.00037999171763658524, 0.00018446719332132488, 0.00011039483069907874, 0.00021121419558767229, 0.00010596100764814764, 0.00017327311797998846, 0.00020620913710445166, 0.00035498526995070279, 0.0003100811445619911, 0.00031680817482993007, 0.00039795541670173407, 0.00020027486607432365, 0.00026468464056961238, 0.0002083328872686252, 0.00019175512716174126, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -31,49,-109,79,50,127,32,50, 
  /* [1][0][][] */ 78,-127,-86,-16,-54,76,73,-48, 
  /* [2][0][][] */ -40,34,-27,-105,-23,-127,-14,-43, 
  /* [3][0][][] */ -19,127,83,39,-7,-93,-27,36, 
  /* [4][0][][] */ -102,29,-127,44,-17,-42,-35,-67, 
  /* [5][0][][] */ 127,-88,-121,51,4,-8,93,-50, 
  /* [6][0][][] */ 7,-48,-42,46,-127,-18,-43,61, 
  /* [7][0][][] */ -21,-36,-16,-56,54,-1,-35,127, 
  /* [8][0][][] */ 15,8,-127,-102,45,-63,-127,-96, 
  /* [9][0][][] */ -127,56,3,111,-4,64,64,16, 
  /* [10][0][][] */ -14,0,86,-127,-31,69,27,18, 
  /* [11][0][][] */ 118,-8,127,14,-51,34,106,103, 
  /* [12][0][][] */ 45,58,32,-43,54,114,83,-127, 
  /* [13][0][][] */ 32,56,-35,66,-17,-127,-29,66, 
  /* [14][0][][] */ 25,-127,-7,-35,8,60,30,-34, 
  /* [15][0][][] */ -117,-30,-21,-96,41,127,-98,-17, 
  /* [16][0][][] */ 9,-44,127,30,-54,16,116,44, 
  /* [17][0][][] */ 59,28,59,27,-16,-67,-29,-127, 
  /* [18][0][][] */ -93,17,-68,21,-25,-127,72,-118, 
  /* [19][0][][] */ 32,18,127,-1,-51,-5,115,102, 
  /* [20][0][][] */ 29,127,45,-33,26,41,37,-2, 
  /* [21][0][][] */ -55,17,8,-127,-74,112,-29,6, 
  /* [22][0][][] */ 27,5,127,-12,-55,22,109,118, 
  /* [23][0][][] */ -96,116,65,68,-103,-127,-90,125, 
  /* [24][0][][] */ -18,18,81,30,-89,127,-6,-88, 
  /* [25][0][][] */ -51,2,60,19,-127,34,-75,17, 
  /* [26][0][][] */ -51,-127,50,-43,12,56,-21,-10, 
  /* [27][0][][] */ -37,69,24,66,-20,127,-37,-3, 
  /* [28][0][][] */ 6,-92,71,17,54,127,34,25, 
  /* [29][0][][] */ 32,127,-15,19,-76,-52,-4,-4, 
  /* [30][0][][] */ -63,69,90,94,-127,-40,-49,-105, 
  /* [31][0][][] */ 26,60,27,57,-43,-13,15,-127, 
  /* [32][0][][] */ -23,0,-34,58,-127,-19,-47,5, 
  /* [33][0][][] */ 82,23,45,77,-24,86,45,127, 
  /* [34][0][][] */ 127,1,-97,-29,-91,-2,61,38, 
  /* [35][0][][] */ 97,104,115,-127,-51,-72,27,79, 
  /* [36][0][][] */ -32,-76,127,29,35,71,12,-33, 
  /* [37][0][][] */ -3,-5,-24,-1,-30,-63,-75,127, 
  /* [38][0][][] */ 127,-17,66,-7,-5,2,-87,54, 
  /* [39][0][][] */ 101,119,-121,-127,-70,118,57,-67, 
  /* [40][0][][] */ -38,127,-27,66,-54,-13,-46,-24, 
  /* [41][0][][] */ -127,31,-27,-54,80,21,10,-53, 
  /* [42][0][][] */ 43,-39,-12,-23,-19,127,4,81, 
  /* [43][0][][] */ -61,54,127,12,76,29,-25,-1, 
  /* [44][0][][] */ 24,127,1,33,-43,-52,-14,-11, 
  /* [45][0][][] */ -72,81,63,-127,-88,32,-44,-75, 
  /* [46][0][][] */ 75,-45,-6,52,13,30,-127,63, 
  /* [47][0][][] */ -92,-127,21,56,61,-61,-15,116, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0024149788077920675, 0.0017644331092014909, 0.0030566276982426643, 0.003182967659085989, 0.0029946970753371716, 0.0023575224913656712, 0.0012148553505539894, 0.0020157108083367348, 0.002011199714615941, 0.0019562740344554186, 0.0039467392489314079, 0.0025676183868199587, 0.0014146482571959496, 0.0044802534393966198, 0.0046531632542610168, 0.0020365589298307896, 0.0037672019097954035, 0.0016944054514169693, 0.0026014712639153004, 0.0021780678071081638, 0.002778476569801569, 0.00020235606643836945, 0.0018594751600176096, 0.0020610513165593147, 0.0019057852914556861, 0.0011219935258850455, 0.0030922763980925083, 0.0029577764216810465, 0.0042435540817677975, 0.0035518095828592777, 0.0016224856954067945, 0.0022656586952507496, 0.0017032312462106347, 0.0036495975218713284, 0.001771699171513319, 0.0010602775728330016, 0.0020285884384065866, 0.0010176933137699962, 0.0016641865950077772, 0.0019805177580565214, 0.0034094252623617649, 0.0029781474731862545, 0.0030427565798163414, 0.0038221282884478569, 0.0019235225627198815, 0.0025421406608074903, 0.0020009151194244623, 0.0018416955135762691, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 8084, -11897, 4680, 5126, -1360, -3962, 1010, 7358, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00019118712225463241, 0.00011705355427693576, 8.8124026660807431e-05, 0.00015946838539093733, 0.00028500065673142672, 0.00013413988926913589, 0.00014540243137162179, 9.9096658232156187e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -27,-12,-22,-24,-65,-16,-19,-9,68,15,7,7,7,9,-14,-7,-29,11,-23,-5,-10,5,-26,1,18,-19,80,-2,-24,-85,-12,0,3,34,127,-21,-21,-49,31,-38,19,9,-4,-23,-12,2,-21,-78, 
  /* [1][0][][] */ 20,-14,-9,51,8,-4,19,37,77,76,38,-48,-44,77,13,0,1,-28,19,-9,-48,54,-47,36,96,6,-33,56,29,-3,127,30,-28,-28,-43,-1,-17,9,-36,-6,-8,-10,-1,22,-9,27,31,12, 
  /* [2][0][][] */ -64,-17,-100,127,-53,-86,29,-96,-88,47,53,-84,-27,-22,-56,2,112,33,-79,-54,-92,-32,-49,19,67,-29,97,-37,58,-32,-67,3,15,-45,34,-22,-45,17,25,-92,57,-95,-63,-121,9,-59,-71,89, 
  /* [3][0][][] */ 23,-48,26,-52,33,-25,2,-65,40,-81,9,-30,-83,-82,-21,20,7,-10,40,-28,-5,29,-78,4,77,-38,62,19,22,14,7,-19,-42,39,17,-12,-59,37,-7,-5,127,8,-46,45,-68,43,-14,-54, 
  /* [4][0][][] */ 32,1,19,6,19,43,-11,1,56,14,15,-47,9,17,-77,29,2,2,23,-21,-32,29,8,45,34,22,-22,16,56,-8,-19,34,0,-20,41,34,-127,12,58,8,20,-2,13,18,-41,64,-20,-94, 
  /* [5][0][][] */ -37,-110,32,118,-35,-6,-50,102,-97,79,76,30,-91,18,64,-34,-18,23,35,-3,-31,26,41,56,-62,23,-41,15,-55,-127,41,22,-111,-54,-23,-7,127,0,7,38,-28,-25,109,87,41,59,45,60, 
  /* [6][0][][] */ 96,-9,-33,1,89,-39,-43,-74,42,41,46,-13,-8,4,8,-9,-7,-4,-5,-29,-52,18,10,32,57,-56,38,-15,-41,110,-24,-2,60,23,-127,-35,-108,-35,36,-61,-8,2,3,-106,18,3,-16,-4, 
  /* [7][0][][] */ -41,-65,37,-37,16,107,56,-44,-13,-81,-54,-11,-10,-35,-48,6,12,-68,81,52,55,-50,11,-6,-25,11,91,-22,52,22,3,-11,-32,-39,-45,94,-127,85,-36,-28,-33,33,-2,-74,22,-38,48,-21, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0081254523247480392, 0.0049747759476304054, 0.0037452711258083582, 0.0067774062044918537, 0.012112528085708618, 0.0057009449228644371, 0.0061796032823622227, 0.0042116078548133373, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 9630, 4320, -2068, 8465, -172, 1135, 12575, 1313, -1457, 3982, -772, 837, -610, 6533, 5743, 611, -7715, -590, 1526, 1107, 16100, -3811, -11005, 350, -6424, 900, -125, -867, -469, -1911, -10153, 3983, 20711, -2304, -1275, 4469, 2000, 5358, -472, 1229, 14901, -4782, -739, 284, 234, -162, -5522, 2907, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00022632340551353991, 0.00030333720496855676, 0.00023351180425379425, 0.00028696315712295473, 0.00031134160235524178, 0.00062505027744919062, 0.00010406129877083004, 0.00024627431412227452, 8.8012900960166007e-05, 0.00026418382185511291, 0.0004520723014138639, 0.00033976015402004123, 0.00023054247139953077, 0.00028844777261838317, 0.00019359470752533525, 0.00048911967314779758, 3.1443603802472353e-05, 0.0013607913861051202, 0.00032314343843609095, 9.3260408903006464e-05, 8.7417196482419968e-05, 0.00039308826671913266, 0.00013339777069631964, 0.00019708416948560625, 0.00018182737403549254, 0.00022942342911846936, 0.00025413188268430531, 0.00024529077927581966, 0.00072013319004327059, 0.00026367473765276372, 0.00015704071847721934, 0.00039323893724940717, 5.9155747294425964e-05, 0.00039100134745240211, 0.00011833070311695337, 0.00034411714295856655, 0.00014450107119046152, 0.00019540872017387301, 0.00093588087474927306, 0.00047554064076393843, 4.7046527470229194e-05, 0.0002726797538343817, 0.00029519089730456471, 9.9656208476517349e-05, 0.00032275545527227223, 0.00038753467379137874, 8.6487845692317933e-05, 0.00056515529286116362, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -80,27,-37,-48,-10,-27,-5,-32,18,-1,7,39,1,-106,-92,-3,95,14,41,32,-88,-39,115,-111,6,-60,-4,127,-52,18,69,127,-21,-13,-8,-49,-40,-63,-15,24,111,-79,-31,63,82,-91,-12,-1, 0,-127,39,-127,2,-27,-95,127,95,-67,23,26,20,-127,-88,-1,-62,31,-51,-85,-36,17,43,114,18,-5,12,115,6,-4,33,-123,-116,34,0,-61,72,-127,59,-9,20,-78,-32,47,97,74,54,-29, -16,-8,10,-34,2,28,-2,61,3,15,-3,22,13,35,-87,20,93,31,-15,6,-127,59,42,13,-9,59,9,-54,-58,-3,-5,-56,-127,8,3,-4,-75,86,-4,15,127,-18,36,-27,60,36,-40,-9, 
  /* [0][1][][] */ -50,-25,-106,-12,-33,15,-24,-6,38,-59,-1,-92,-29,4,-127,109,97,24,88,76,-36,127,127,127,29,-69,-35,43,72,-31,71,-118,46,-28,-47,-76,-35,-121,31,25,81,112,-2,-6,-62,127,85,-26, -127,37,127,103,127,-127,-112,-17,-17,-127,-127,-127,127,8,-34,37,26,-127,-127,-127,39,4,-96,-98,127,-45,127,-29,127,127,-28,66,-94,-127,127,-127,20,-114,-127,-127,45,127,-82,38,-127,-65,127,127, -20,4,-7,13,43,123,-45,48,42,9,57,-48,-30,-4,-79,-22,127,66,4,47,-83,-92,110,-20,2,127,21,-13,20,29,127,7,-6,22,58,-26,-69,35,49,-5,36,93,127,-7,-46,-57,60,0, 
  /* [0][2][][] */ -23,3,-51,-3,-5,-24,-34,-22,45,29,16,37,-9,24,66,-18,21,12,62,4,-58,7,31,31,15,-52,-14,-14,-42,-10,8,-41,18,52,-4,-31,-101,0,-14,4,12,-8,-11,-67,-20,12,-84,-28, -24,-28,69,-6,-76,-26,-127,-104,127,76,60,29,-14,-28,4,-11,100,117,-51,-23,-80,12,-21,-41,9,-49,-74,-47,-43,-29,114,18,-98,59,-60,-31,-23,-98,33,35,-117,9,-80,127,23,-6,38,-39, 24,-4,26,-7,-37,23,-21,-106,-7,-10,-17,15,-4,38,61,-127,109,-17,-19,-20,-90,14,24,-18,-8,37,-29,13,-37,-25,-5,3,-61,65,-36,-33,-127,84,-21,23,22,9,49,50,-19,-23,-104,-13, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0096187442541122437, 0.012891830876469612, 0.0099242515861988068, 0.012195934541523457, 0.013232017867267132, 0.026564637199044228, 0.004422605037689209, 0.010466658510267735, 0.0037405481562018394, 0.011227812618017197, 0.019213072955608368, 0.014439806342124939, 0.0097980545833706856, 0.012259029783308506, 0.0082277748733758926, 0.020787585526704788, 0.0013363531325012445, 0.057833630591630936, 0.013733595609664917, 0.003963567316532135, 0.0037152308505028486, 0.016706250607967377, 0.0056694052182137966, 0.0083760768175125122, 0.0077276634983718395, 0.0097504956647753716, 0.010800604708492756, 0.010424857959151268, 0.030605660751461983, 0.01120617613196373, 0.0066742305643856525, 0.016712654381990433, 0.0025141192600131035, 0.016617557033896446, 0.0050290548242628574, 0.014624978415668011, 0.0061412956565618515, 0.0083048706874251366, 0.039774935692548752, 0.020210476592183113, 0.0019994773901998997, 0.011588889174163342, 0.012545612640678883, 0.0042353887110948563, 0.01371710654348135, 0.016470223665237427, 0.0036757334601134062, 0.024019099771976471, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2832, 1634, 2299, 4434, 466, 3931, 1012, 1381, 1197, 3234, 1985, 4634, 3257, 3120, 2288, 272, 59, -2163, 5506, 1492, 1183, 4100, 5644, 353, 1892, 2432, 2450, -303, -1423, 1211, 4741, 2789, 1278, 969, 695, -249, 526, 1739, 890, 2228, 849, 2309, 1313, 204, 777, 1621, 57, 18087, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00032377397292293608, 0.00039797765202820301, 0.00030339934164658189, 0.0002363871899433434, 0.0011928670573979616, 0.00018178585742134601, 0.0006285939016379416, 0.0004529631114564836, 0.00045377510832622647, 0.00023624287860002369, 0.00040335554513148963, 0.00015345370047725737, 0.00026098295347765088, 0.00020173206576146185, 0.00024803477572277188, 0.00031995298922993243, 0.0004657453391700983, 0.00034195309854112566, 0.00016885212971828878, 0.00063157902332022786, 0.0005803306121379137, 0.00019986908591818064, 0.00014570049825124443, 0.00055930775124579668, 0.00027758741634897888, 0.00035800089244730771, 0.00034594660974107683, 0.00028373932582326233, 0.00032957136863842607, 0.00072649848880246282, 0.00020755305013153702, 0.00030336368945427239, 0.00050031911814585328, 0.00031843179021961987, 0.00085557322017848492, 0.00034074918949045241, 0.00022500610793940723, 0.00027194173890165985, 0.00026482477551326156, 0.00036515606916509569, 0.0005754215526394546, 0.00028242488042451441, 0.00025959618506021798, 0.00043048535007983446, 0.00054098630789667368, 0.00039772148011252284, 0.00048536082613281906, 6.643019150942564e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -86,-16,40,-105,-92,127,10,-58, 
  /* [1][0][][] */ 54,3,8,-18,10,52,-127,52, 
  /* [2][0][][] */ -29,52,-102,80,-35,127,32,60, 
  /* [3][0][][] */ 127,-35,-36,67,0,-59,40,94, 
  /* [4][0][][] */ -72,-3,-2,21,-26,-31,127,-1, 
  /* [5][0][][] */ 76,127,8,88,-109,-49,-1,-13, 
  /* [6][0][][] */ -5,-50,50,127,30,-95,9,47, 
  /* [7][0][][] */ 127,-19,67,3,-74,20,75,92, 
  /* [8][0][][] */ -23,-127,36,35,63,-40,-12,-3, 
  /* [9][0][][] */ -85,-102,19,-13,-44,3,-66,127, 
  /* [10][0][][] */ -12,-127,14,74,15,72,15,-26, 
  /* [11][0][][] */ -113,-127,17,-75,20,41,-36,111, 
  /* [12][0][][] */ 71,-29,78,-96,43,-127,73,18, 
  /* [13][0][][] */ 17,37,28,127,-11,27,28,-40, 
  /* [14][0][][] */ -32,4,61,15,122,-15,-15,127, 
  /* [15][0][][] */ -84,127,71,68,23,62,-52,93, 
  /* [16][0][][] */ -20,-12,-45,-127,-42,51,13,62, 
  /* [17][0][][] */ 65,127,16,50,-56,-71,-9,-6, 
  /* [18][0][][] */ -7,25,-11,-127,-38,-93,-3,14, 
  /* [19][0][][] */ 7,-65,-97,-127,-50,75,0,6, 
  /* [20][0][][] */ 25,-9,10,-12,127,18,32,-34, 
  /* [21][0][][] */ -78,-127,-86,-61,34,35,78,-39, 
  /* [22][0][][] */ -70,-54,81,116,61,-58,-82,127, 
  /* [23][0][][] */ 34,33,-35,82,127,24,-7,79, 
  /* [24][0][][] */ 124,-24,-127,-38,2,-28,49,-65, 
  /* [25][0][][] */ 1,-11,-46,-15,48,-38,-127,-58, 
  /* [26][0][][] */ 104,13,89,-31,-92,50,38,127, 
  /* [27][0][][] */ 53,-78,-66,119,66,-30,16,-127, 
  /* [28][0][][] */ -57,127,77,58,61,-33,-18,21, 
  /* [29][0][][] */ -6,15,67,16,-76,-10,127,65, 
  /* [30][0][][] */ -64,-105,39,-72,-105,127,79,44, 
  /* [31][0][][] */ 94,23,119,-41,-115,79,117,127, 
  /* [32][0][][] */ -116,-22,-50,32,-16,19,127,31, 
  /* [33][0][][] */ -127,126,76,70,24,43,-52,17, 
  /* [34][0][][] */ 89,3,19,-25,8,31,-127,29, 
  /* [35][0][][] */ -7,2,23,38,-49,21,14,-127, 
  /* [36][0][][] */ 38,-3,-40,-127,93,-6,21,126, 
  /* [37][0][][] */ 39,-33,-42,-32,-34,24,19,-127, 
  /* [38][0][][] */ 38,127,40,83,-32,-75,19,-43, 
  /* [39][0][][] */ 99,3,112,10,-97,40,127,96, 
  /* [40][0][][] */ -50,-57,127,98,-22,-12,-55,19, 
  /* [41][0][][] */ 22,-2,19,33,-9,-42,-13,127, 
  /* [42][0][][] */ 74,-127,-84,-87,-63,54,37,-121, 
  /* [43][0][][] */ 74,-18,98,-38,-53,-31,106,127, 
  /* [44][0][][] */ -81,-51,-52,127,55,-6,-64,14, 
  /* [45][0][][] */ 127,-30,70,-19,-34,36,-10,63, 
  /* [46][0][][] */ 78,-127,-12,96,106,-6,54,-12, 
  /* [47][0][][] */ 104,118,-43,123,-65,-80,19,-127, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0030567834619432688, 0.0037573478184640408, 0.0028644243720918894, 0.0022317557595670223, 0.011261980049312115, 0.0017162589356303215, 0.0059346193447709084, 0.0042764712125062943, 0.0042841373942792416, 0.0022303932346403599, 0.0038081211969256401, 0.0014487721491605043, 0.002463966840878129, 0.001904573175124824, 0.0023417219053953886, 0.0030207089148461819, 0.0043971496634185314, 0.0032284143380820751, 0.0015941503224894404, 0.0059628025628626347, 0.0054789609275758266, 0.0018869845662266016, 0.0013755733380094171, 0.0052804821170866489, 0.0026207312475889921, 0.0033799232915043831, 0.0032661175355315208, 0.0026788122486323118, 0.0031115170568227768, 0.00685894675552845, 0.0019595297053456306, 0.0028640876989811659, 0.0047235642559826374, 0.0030063472222536802, 0.0080775544047355652, 0.0032170480117201805, 0.0021243058145046234, 0.0025674300268292427, 0.0025002378970384598, 0.0034474758431315422, 0.0054326141253113747, 0.0026664023753255606, 0.0024508743081241846, 0.0040642563253641129, 0.0051075071096420288, 0.003754929406568408, 0.0045823412947356701, 0.00062717427499592304, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 3742, 2982, 3314, 8602, 4124, 4937, 1989, -2637, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00013650859182234854, 0.00013101744116283953, 0.00013758134446106851, 0.00013798040163237602, 0.00011150556383654475, 9.4059607363305986e-05, 0.00010141816164832562, 0.00033084195456467569, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -28,53,-26,0,-54,-34,-78,24,10,23,50,37,41,7,-51,14,-38,47,12,-69,34,33,-127,1,-4,10,-34,53,-6,-19,14,21,26,-20,34,22,-5,100,-67,-28,-2,13,-27,27,6,15,21,-3, 
  /* [1][0][][] */ -72,-111,-50,20,94,-30,-127,62,-18,-36,-15,-87,-29,91,10,-13,107,-125,-10,-10,-56,-4,-3,-33,17,-18,-30,-48,5,-13,-100,-15,43,-66,-82,-91,44,1,-87,-14,0,38,5,85,-18,6,5,45, 
  /* [2][0][][] */ -4,-69,-4,52,110,20,102,-12,-25,-24,-10,-61,-6,-16,19,25,-22,-96,28,-71,9,-81,-62,4,-82,48,72,-91,-42,-7,-69,-41,29,-7,-86,-55,-4,127,74,-37,-2,1,-27,-67,45,54,38,-27, 
  /* [3][0][][] */ -2,-1,31,-10,32,26,18,-88,14,17,-19,21,5,-107,-15,4,-28,5,-8,-5,-13,49,-127,7,16,-90,45,11,50,-24,-27,51,-13,1,7,-40,-84,-36,2,-1,-18,6,35,6,-18,-8,9,-55, 
  /* [4][0][][] */ 42,-40,-1,76,50,2,-26,5,-31,-19,24,-36,84,35,-33,42,-43,-60,68,36,26,-52,127,31,-23,17,-59,-15,-8,23,-86,-34,79,-19,-35,-60,-40,-42,-26,7,-59,102,-7,-18,61,71,48,40, 
  /* [5][0][][] */ -68,-8,-37,51,-8,0,-6,-66,-62,-38,10,-19,24,41,-78,9,127,-17,57,-71,23,-94,-9,3,92,-104,-113,-17,55,-34,32,-77,13,-69,-33,20,-69,-35,23,-33,-44,37,87,65,36,30,20,-43, 
  /* [6][0][][] */ -35,0,-37,33,-18,79,-75,4,-10,5,-127,12,44,46,116,21,25,14,44,-9,46,-18,-57,-13,6,-8,-59,14,-1,-43,0,-24,30,-52,14,3,-11,-7,-61,-18,-40,55,-28,30,34,33,33,1, 
  /* [7][0][][] */ 30,-5,43,-16,1,5,13,-8,11,7,-5,0,-14,-11,-5,-13,16,-7,-27,-19,-19,15,127,11,8,-14,1,7,7,-13,-21,14,-3,17,-9,-15,-12,11,5,28,6,-1,6,-3,-18,-4,-18,14, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0058016153052449226, 0.0055682412348687649, 0.0058472068049013615, 0.0058641666546463966, 0.0047389864921569824, 0.0039975331164896488, 0.0043102717027068138, 0.014060782268643379, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 3455, 142, 156, -812, 8577, 3636, -2231, 8096, 1631, -300, -1921, -54, -3100, 79, 328, -517, 9070, 1793, -1054, 25496, 2945, 23465, -668, 2807, -411, -7863, 9956, -87, 534, -860, 3748, 12235, -507, 6687, -1382, 1067, 7968, -2092, 1856, -877, 470, -1005, 15880, -6302, 53, -821, -661, 860, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.368291360558942e-05, 0.00022796441044192761, 0.001371645019389689, 0.00070541573222726583, 0.00014036972424946725, 0.00013920082710683346, 6.6078122472390532e-05, 0.00014052711776457727, 0.00020224005857016891, 0.00032076431671157479, 7.1126276452559978e-05, 0.00088917079847306013, 0.00050124624976888299, 0.00017391759320162237, 0.00028048959211446345, 0.0037852642126381397, 0.00018735394405666739, 0.00019443118071649224, 0.000744910619687289, 0.00012356977094896138, 0.00053106778068467975, 6.8898283643648028e-05, 0.00037044243072159588, 0.00014537913375534117, 0.00017509520694147795, 0.00072183704469352961, 0.00013507160474546254, 0.00031803679303266108, 0.00074584956746548414, 0.00031352357473224401, 6.7368637246545404e-05, 6.6070824686903507e-05, 0.0008855137275531888, 0.00039813108742237091, 0.00021898499107919633, 0.00012393076031003147, 0.00010937403567368165, 8.6269508756231517e-05, 7.6386248110793531e-05, 0.0002697981835808605, 0.00028024284983985126, 0.00040859088767319918, 6.9922723923809826e-05, 9.5507501100655645e-05, 0.00088175811106339097, 0.00050273444503545761, 0.004054708406329155, 0.00072247709613293409, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 86,-36,-71,-83,5,-105,105,-52,81,11,80,58,-114,120,51,-114,73,-117,12,-29,-127,-127,40,111,11,59,-10,64,-127,16,106,-62,-53,-82,59,96,-113,32,92,81,-44,-104,-78,60,-64,-1,14,-84, 60,-48,71,127,58,32,127,-127,-70,98,44,84,2,45,52,120,82,-119,-107,-50,93,-107,53,4,127,127,-48,78,0,81,89,-62,49,109,127,127,-92,56,59,-30,78,36,-46,87,127,104,-1,-15, 8,-29,8,-43,27,52,35,-48,-12,45,-66,24,122,-32,-87,1,37,-38,96,-17,33,1,-83,-121,33,-3,-35,22,37,24,45,-16,2,-69,25,22,-22,6,41,-52,-78,127,29,97,-57,-47,2,68, 
  /* [0][1][][] */ 102,67,-127,11,-78,-127,77,-69,109,-76,127,-95,110,116,127,127,-36,117,-21,-81,108,-97,52,127,-16,-3,-46,11,-62,44,57,-127,-120,-88,-18,41,18,71,127,127,-42,-76,-127,76,6,-4,-117,-127, 127,127,106,-10,-127,9,115,-80,-127,-127,76,-127,53,127,101,-119,-31,127,127,-127,-85,-127,76,-41,51,17,-127,56,7,127,127,-112,127,127,-28,28,13,127,83,-35,127,4,-49,127,-17,127,127,38, 8,55,8,29,-29,79,36,-73,-8,-86,-60,-86,-127,-7,-97,8,48,20,-99,-48,-67,11,-127,-125,-51,-2,-76,16,34,11,37,-20,15,-84,-10,19,22,30,35,-77,-73,110,-6,87,13,-48,7,87, 
  /* [0][2][][] */ 27,-43,-30,2,32,-24,-13,-35,78,19,15,47,36,62,-30,-12,-127,-41,1,8,1,-62,13,18,116,-19,-48,-100,16,46,5,-108,-30,-60,-51,-27,127,5,46,77,-110,-62,-120,78,1,12,100,-62, 28,-57,6,3,18,5,35,-35,-85,55,3,63,7,39,-19,15,-89,-32,-15,-31,-41,-96,31,-12,109,-12,-67,-127,10,94,6,-70,25,72,-39,0,116,24,0,-23,-81,-6,-14,87,-9,11,-91,58, -14,-22,29,8,20,24,4,-24,2,37,-16,21,47,-24,-34,3,36,-5,32,-24,13,15,-40,-75,-24,-15,-16,-48,20,26,-7,-14,8,-66,-31,7,67,8,21,-39,-125,58,-16,47,-5,23,10,14, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0027065237518399954, 0.0096884872764348984, 0.058294910937547684, 0.029980167746543884, 0.0059657134115695953, 0.0059160348027944565, 0.002808320103213191, 0.0059724021703004837, 0.0085952021181583405, 0.013632483780384064, 0.0030228665564209223, 0.037789758294820786, 0.0213029645383358, 0.0073914974927902222, 0.01192080695182085, 0.16087372601032257, 0.0079625425860285759, 0.0082633253186941147, 0.031658701598644257, 0.005251715425401926, 0.022570380941033363, 0.0029281768947839737, 0.015743803232908249, 0.0061786128208041191, 0.0074415463022887707, 0.030678072944283485, 0.005740542896091938, 0.013516563922166824, 0.031698606908321381, 0.013324751518666744, 0.0028631670866161585, 0.0028080099727958441, 0.037634331732988358, 0.016920570284128189, 0.0093068620190024376, 0.0052670571021735668, 0.0046483962796628475, 0.0036664539948105812, 0.0032464154064655304, 0.011466422118246555, 0.011910321190953255, 0.017365112900733948, 0.00297171575948596, 0.0040590688586235046, 0.037474717944860458, 0.021366212517023087, 0.17232510447502136, 0.030705276876688004, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { -36, -7546, 12608, 2013, 7980, 2592, 3183, 534, -260, -6307, 1126, 2539, 10803, -11460, 16, 5705, -6397, -43, 6253, 6919, 6837, 3221, -914, 82, 11091, 25649, 8647, -9772, 1492, -64, 598, -2928, 18489, 10948, 10134, -1388, -12129, 2097, -3985, 969, -10291, -9142, -2369, 2474, 8738, -9928, 7026, -146, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00033046427415683866, 0.00032273915712721646, 6.9395973696373403e-05, 0.000344505300745368, 0.00033848403836600482, 0.0012043850729241967, 0.00072054925840348005, 0.00064111233223229647, 0.00063938618404790759, 0.0005934819346293807, 0.0022964987438172102, 0.00034331684582866728, 0.00016023432544898242, 0.00039465015288442373, 0.00084964180132374167, 6.2409293605014682e-05, 0.00032478891080245376, 0.00038669552304781973, 0.00017902164836414158, 0.00021842731803189963, 0.00016218208475038409, 0.0011075860820710659, 0.00062398362206295133, 0.0010034870356321335, 0.00027512668748386204, 7.8545439464505762e-05, 0.00056472478900104761, 0.00037167008849792182, 0.00085443083662539721, 0.00063381297513842583, 0.0008820253424346447, 0.0011170440120622516, 0.00012516067363321781, 0.00016997764760162681, 0.00037716666702181101, 0.00061582989292219281, 0.00040381622966378927, 0.00030158270965330303, 0.00089256424689665437, 0.0003220838843844831, 0.00044668163172900677, 0.00033104605972766876, 0.00038886128459125757, 0.00039540146826766431, 0.00014256825670599937, 0.00033966821501962841, 4.0899114537751302e-05, 0.00051696220180019736, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 10,69,-3,-22,92,-33,127,-8, 
  /* [1][0][][] */ 125,73,68,-24,-6,-41,-11,127, 
  /* [2][0][][] */ -49,11,5,127,-4,-13,-52,83, 
  /* [3][0][][] */ 63,-16,-102,-2,-11,-63,6,127, 
  /* [4][0][][] */ -74,94,-127,-30,22,-4,-25,-6, 
  /* [5][0][][] */ 127,-13,-2,-46,3,-35,10,-127, 
  /* [6][0][][] */ 0,4,-5,12,-127,-32,35,1, 
  /* [7][0][][] */ -8,-65,-2,-2,-24,-1,-127,-2, 
  /* [8][0][][] */ -19,37,13,-8,127,2,-70,-19, 
  /* [9][0][][] */ 127,-35,-5,-30,4,-30,53,117, 
  /* [10][0][][] */ 127,12,-16,-40,1,9,2,-126, 
  /* [11][0][][] */ -38,-3,12,127,1,-34,-27,35, 
  /* [12][0][][] */ -119,-21,-86,-1,18,127,-33,-99, 
  /* [13][0][][] */ 127,5,126,1,-7,29,35,37, 
  /* [14][0][][] */ -127,-5,14,19,-3,-14,2,118, 
  /* [15][0][][] */ -119,26,9,101,-24,-22,-43,127, 
  /* [16][0][][] */ 63,-75,127,84,-8,-105,41,50, 
  /* [17][0][][] */ 3,-79,-105,127,25,49,22,116, 
  /* [18][0][][] */ 3,-15,-127,47,6,-14,48,101, 
  /* [19][0][][] */ 48,17,-18,127,-18,-1,-107,-47, 
  /* [20][0][][] */ 50,87,110,-127,-6,-100,12,-95, 
  /* [21][0][][] */ -3,-5,-10,-1,-127,-17,50,4, 
  /* [22][0][][] */ 6,58,-2,-13,1,127,-8,5, 
  /* [23][0][][] */ 127,36,-5,103,-9,-3,-47,-114, 
  /* [24][0][][] */ -127,17,-81,-75,31,-59,-71,-71, 
  /* [25][0][][] */ -49,8,-70,-32,11,-127,28,-53, 
  /* [26][0][][] */ -87,-32,-127,-10,8,17,-20,-31, 
  /* [27][0][][] */ 94,-8,127,9,-10,62,27,25, 
  /* [28][0][][] */ 2,-74,-14,31,42,-127,9,15, 
  /* [29][0][][] */ -10,-1,18,-127,-10,-5,26,-5, 
  /* [30][0][][] */ -57,1,121,-7,4,3,-6,-127, 
  /* [31][0][][] */ -10,17,5,11,127,16,-43,-1, 
  /* [32][0][][] */ -127,-27,-120,-19,-17,-16,-42,-51, 
  /* [33][0][][] */ 9,-44,13,-28,38,-127,16,-21, 
  /* [34][0][][] */ -62,-127,-117,59,-6,-37,-5,-41, 
  /* [35][0][][] */ 65,2,-125,1,4,2,9,127, 
  /* [36][0][][] */ 87,51,97,29,11,127,8,41, 
  /* [37][0][][] */ -18,30,-17,127,13,-27,-15,3, 
  /* [38][0][][] */ -1,8,16,-3,127,32,-38,3, 
  /* [39][0][][] */ -38,12,6,39,-53,127,-123,-24, 
  /* [40][0][][] */ 105,-16,127,-2,-15,35,31,34, 
  /* [41][0][][] */ 121,8,127,6,-8,2,39,45, 
  /* [42][0][][] */ 64,-45,-5,-34,47,127,36,-32, 
  /* [43][0][][] */ -11,-76,-8,-8,-41,-13,-127,1, 
  /* [44][0][][] */ -38,-121,16,96,13,41,14,-127, 
  /* [45][0][][] */ 108,7,127,-24,-22,26,4,44, 
  /* [46][0][][] */ -90,6,-14,127,5,19,-22,49, 
  /* [47][0][][] */ -14,45,-19,-8,3,127,-14,-9, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0032355855219066143, 0.0031599486246705055, 0.00067945802584290504, 0.0033730615396052599, 0.0033141071908175945, 0.011792169883847237, 0.0070549193769693375, 0.0062771500088274479, 0.0062602492980659008, 0.0058107990771532059, 0.022485086694359779, 0.0033614253625273705, 0.0015688590938225389, 0.0038640315178781748, 0.0083188684657216072, 0.00061105127679184079, 0.0031800179276615381, 0.0037861473392695189, 0.0017528062453493476, 0.0021386283915489912, 0.0015879296697676182, 0.01084440853446722, 0.0061094420962035656, 0.0098251709714531898, 0.0026937734801322222, 0.00076904072193428874, 0.0055292369797825813, 0.0036390330642461777, 0.0083657577633857727, 0.006205681711435318, 0.0086359363049268723, 0.010937011800706387, 0.0012254519388079643, 0.0016642562113702297, 0.0036928500048816204, 0.0060296091251075268, 0.0039537767879664898, 0.0029528052546083927, 0.0087391231209039688, 0.0031535329762846231, 0.0043734731152653694, 0.0032412817236036062, 0.003807352390140295, 0.0038713875692337751, 0.0013958900235593319, 0.0033257016912102699, 0.00040044443449005485, 0.0050615924410521984, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 2163, 2494, -1579, -9639, 449, -890, -342, 3344, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021974751143716276, 0.00030592211987823248, 0.00036312124575488269, 0.0001647107710596174, 0.00019406175124458969, 0.00012207819963805377, 0.00033923875889740884, 0.00021819517132826149, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -21,-2,-27,12,-11,-127,10,31, 
  /* [1][0][][] */ -62,18,-127,102,13,50,-9,29, 
  /* [2][0][][] */ 22,-7,26,-4,-4,-127,8,43, 
  /* [3][0][][] */ 27,49,57,127,31,-37,-41,-9, 
  /* [4][0][][] */ 13,61,26,-24,-127,-11,19,-10, 
  /* [5][0][][] */ 57,-25,127,-123,16,-59,-1,-48, 
  /* [6][0][][] */ 28,127,40,-28,38,-9,-77,-25, 
  /* [7][0][][] */ -13,-35,-36,-13,-6,-127,21,45, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0093392692506313324, 0.013001689687371254, 0.015432653017342091, 0.0070002074353396893, 0.0082476241514086723, 0.0051883230917155743, 0.014417646452784538, 0.0092732943594455719, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { 7485, 207, 1722, 1060, 13541, 2357, -534, 14158, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00013898468750994653, 0.0005091099301353097, 0.00023946489091031253, 0.00070541613968089223, 0.00013018074969295412, 0.00027035287348553538, 0.0010708799818530679, 0.00011971532512689009, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -9,-7,18,-2,2,27,6,-14, 27,-3,16,-6,10,127,24,127, 1,-3,7,-7,1,16,11,-19, 
  /* [0][1][][] */ 12,-127,-1,2,-16,-7,-86,-30, -127,101,-83,127,-127,-11,127,-76, -1,-3,-12,-63,-3,1,52,-32, 
  /* [0][2][][] */ 14,-1,-3,-4,-5,-25,14,-16, 61,6,127,-19,9,-119,17,22, -9,-1,-26,-6,-3,-22,14,-18, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.005906849168241024, 0.021637171506881714, 0.010177257470786572, 0.029980184510350227, 0.0055326814763247967, 0.011489996686577797, 0.045512400567531586, 0.0050879013724625111, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 27199, 6273, 32025, 46701, 4337, 523679, 66014, 26876, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00012849051563534886, 7.8945849963929504e-05, 9.9909550044685602e-05, 2.4069779101409949e-05, 0.0002417477808194235, 6.6661086748354137e-06, 1.9910617083951365e-06, 0.00012665832764469087, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 4,-2,17, 3,-23,35, 5,-25,24, 
  /* [0][1][][] */ 31,27,29, 59,17,62, 18,-34,42, 
  /* [0][2][][] */ -28,-93,-9, -36,-127,3, -14,-56,21, 
  /* [1][0][][] */ 27,73,23, 2,6,-4, -36,-71,-28, 
  /* [1][1][][] */ 48,117,36, -2,-2,-5, -58,-127,-40, 
  /* [1][2][][] */ 24,41,8, 0,-5,-3, -37,-56,-6, 
  /* [2][0][][] */ 43,92,15, 55,127,19, 14,43,3, 
  /* [2][1][][] */ -44,-77,-23, -75,-84,-31, -29,-2,-14, 
  /* [2][2][][] */ 0,12,9, 5,19,4, -1,12,-3, 
  /* [3][0][][] */ 37,-45,-29, 72,-49,-52, 32,-19,-15, 
  /* [3][1][][] */ 79,-64,-43, 127,-64,-84, 61,-31,-31, 
  /* [3][2][][] */ 17,-26,-8, 39,-35,-21, 14,-15,-5, 
  /* [4][0][][] */ -10,-22,-3, 29,46,11, -14,-27,-3, 
  /* [4][1][][] */ -27,-58,-7, 65,127,20, -32,-60,-7, 
  /* [4][2][][] */ -7,-11,5, 23,26,-2, -10,-12,-2, 
  /* [5][0][][] */ -37,-54,-13, -50,-73,-25, -26,-12,-1, 
  /* [5][1][][] */ -79,-124,-53, -106,-127,-53, -67,-41,-14, 
  /* [5][2][][] */ -20,-3,-11, -14,-9,-7, -9,4,0, 
  /* [6][0][][] */ -97,3,46, 13,30,-8, 80,26,-17, 
  /* [6][1][][] */ -127,-27,57, 25,31,-20, 125,25,-28, 
  /* [6][2][][] */ -44,-1,33, 28,5,11, 48,-2,43, 
  /* [7][0][][] */ -9,15,-2, -17,22,-6, -10,20,-7, 
  /* [7][1][][] */ 15,84,-5, 20,127,-22, -5,60,-26, 
  /* [7][2][][] */ -31,-51,-19, -45,-53,-32, -23,3,-19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.032765079289674759, 0.020131191238760948, 0.025476934388279915, 0.00613779341802001, 0.061645679175853729, 0.001699857646599412, 0.00050772068789228797, 0.032297872006893158, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10274074971675873, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.10213430225849152, } };
const TfArray<1, int> quant47_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,64,64,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,65,65,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.10591983050107956, } };
const TfArray<1, int> quant51_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.06604640930891037, } };
const TfArray<1, int> quant54_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.10411880165338516, } };
const TfArray<1, int> quant55_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,33,33,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.075248941779136658, } };
const TfArray<1, int> quant59_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.018976174294948578, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.051053687930107117, } };
const TfArray<1, int> quant62_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.078965328633785248, } };
const TfArray<1, int> quant63_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.058849252760410309, } };
const TfArray<1, int> quant66_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.079325668513774872, } };
const TfArray<1, int> quant67_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.02278178371489048, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,16,16,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.030275842174887657, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,16,16,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.064069442451000214, } };
const TfArray<1, int> quant70_zero = { 1, { -36 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,16,16,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 65536), (TfLiteIntArray*)&g0::tensor_dimension44, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32768), (TfLiteIntArray*)&g0::tensor_dimension46, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension48, 196608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 202800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension50, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 98304), (TfLiteIntArray*)&g0::tensor_dimension51, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension52, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension54, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension56, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 52272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension58, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 26624), (TfLiteIntArray*)&g0::tensor_dimension59, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension60, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension62, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension63, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension64, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14336), (TfLiteIntArray*)&g0::tensor_dimension66, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension67, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension69, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 512), (TfLiteIntArray*)&g0::tensor_dimension70, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_207_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_207_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_207_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_207_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_207_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
