/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 19.04.2025 03:01:32

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 412176;
#else
constexpr int kTensorArenaSize = 411152;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,128,128,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 19597, -24812, -30003, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00027375153149478137, 0.00022264229482971132, 0.0002186131605412811, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 57,34,124,-75,-61,-1,32,-3,-18,3,-2,-4,11,-83,63,11,-49,75,101,127,8,5,41,-69,-87,94,-44,40,113,-24,-45,17, 
  /* [1][0][][] */ 40,-30,-103,27,-4,126,-62,-2,114,-53,1,-63,-127,102,37,-42,88,-42,-8,-125,-103,25,109,72,29,26,5,-11,-116,-44,6,-26, 
  /* [2][0][][] */ -29,78,-88,81,84,-51,-98,111,91,50,124,5,-107,-71,66,113,-72,-58,11,-127,69,115,-44,-83,72,-49,-12,-113,-1,-61,85,-19, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0044737705029547215, 0.0036385206039994955, 0.0035726744681596756, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -288, 80, 1138, 286, 279, 392, 1650, 420, 306, 77, 452, -394, 744, 111, 35, 60, 151, -396, 1096, 1375, 1, 440, 284, 72, 153, 851, -497, -87, 1851, -740, 460, -45, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.7851135352393612e-05, 5.2077735745115206e-05, 6.4302730606868863e-05, 6.454694812418893e-05, 5.6297798437299207e-05, 5.9244131989544258e-05, 8.7588021415285766e-05, 5.6866156228352338e-05, 5.9470261476235464e-05, 6.3319355831481516e-05, 5.4372991144191474e-05, 5.2591763960663229e-05, 7.0295776822604239e-05, 6.6030508605763316e-05, 6.2310617067851126e-05, 4.9178586777998134e-05, 5.3224823204800487e-05, 5.3701496653957292e-05, 6.3636791310273111e-05, 6.8022942286916077e-05, 6.1761049437336624e-05, 5.0352831749478355e-05, 6.5910600824281573e-05, 5.8182122302241623e-05, 5.3060855861986056e-05, 5.4674408602295443e-05, 5.5392050853697583e-05, 5.2048995712539181e-05, 8.0597063060849905e-05, 4.6119879698380828e-05, 5.5497221183031797e-05, 5.0416016165399924e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -29,-60,86,13,83,-18,-94,-104,52,-95,-113,5,46,-2,-50,45,-53,-17,-75,-42,-64,-107,-4,89,-127,0,62,-52,98,-14,-29,-84,73,-71,-99,52,-116,-81,-91,22,55,-82,-84,83,36,-102,96,-22, 
  /* [1][0][][] */ -47,44,-57,-13,-38,100,29,19,75,-101,-105,113,52,-37,26,85,127,-45,44,104,-57,-23,18,25,63,37,-42,106,-5,20,102,-47,58,122,-30,13,64,60,-27,-60,-53,4,-45,-100,-41,32,-51,-73, 
  /* [2][0][][] */ 33,33,-25,100,-9,-58,108,103,-87,90,-2,107,93,14,107,-106,-7,-36,61,66,-81,12,127,34,-26,48,127,15,-32,92,94,91,-57,-14,-53,-81,-39,78,101,-41,-69,-47,18,29,-49,100,-14,-45, 
  /* [3][0][][] */ 79,17,36,-12,-47,60,-127,44,59,29,62,16,87,88,48,23,72,99,-66,20,110,-64,-47,-83,4,-74,-83,101,38,-71,90,22,-34,-16,-4,3,-75,-4,43,57,-11,-66,-78,-20,73,36,-28,-62, 
  /* [4][0][][] */ 68,116,7,48,-12,-5,13,27,73,98,-8,63,16,-46,-39,-44,-33,12,-67,-15,116,-92,74,37,11,20,53,-46,-77,46,-66,-32,80,127,1,-91,-47,10,-108,65,-36,-49,-95,-92,42,112,32,46, 
  /* [5][0][][] */ 104,-76,48,86,48,-107,-13,59,111,-96,-35,-51,32,59,27,29,33,72,-96,102,41,58,27,-16,-127,-45,-58,-73,54,13,-14,-115,-23,12,-53,29,-101,-19,53,34,-86,-37,54,57,-21,33,45,-36, 
  /* [6][0][][] */ 17,-8,113,81,-27,-20,38,81,3,-19,39,-35,76,70,127,-58,85,2,44,82,-34,-47,95,64,-18,-47,45,-12,12,-30,56,-14,-39,-52,-4,-50,47,32,-40,51,98,64,28,26,-38,84,-40,-5, 
  /* [7][0][][] */ 127,82,-25,-36,-56,125,-37,11,123,16,-94,26,51,-97,32,86,48,29,-6,91,63,31,-10,91,-43,117,31,64,-106,112,-23,51,36,38,50,101,-93,96,-5,-12,99,-63,74,60,58,7,98,-108, 
  /* [8][0][][] */ 26,38,-43,-74,64,36,-95,-12,19,43,25,99,12,-61,-84,-54,-82,101,-77,27,40,-15,82,107,-96,101,19,78,-56,14,-96,113,97,-20,51,8,110,16,-8,78,74,104,-88,-127,-2,-15,-10,109, 
  /* [9][0][][] */ 17,14,117,33,73,-74,-30,-95,32,47,14,50,-30,-70,-86,-4,29,-1,-63,-70,2,79,-96,-85,127,8,9,21,-14,-32,-71,109,51,9,13,-22,-62,15,-37,-34,57,-58,27,-47,70,13,-100,38, 
  /* [10][0][][] */ -47,100,104,-62,-3,121,88,40,51,43,21,-57,101,67,-45,28,-40,95,-103,-73,-7,28,53,-61,56,74,-126,-103,-78,90,-99,-64,99,115,108,80,-33,19,-29,50,-27,127,-116,-44,-88,-47,-1,-59, 
  /* [11][0][][] */ 101,5,3,97,110,38,92,22,102,85,-44,103,-19,-59,24,-76,-38,-119,88,30,20,66,14,-127,-83,-110,-10,61,71,-8,53,6,-103,-85,41,35,-72,64,-42,-75,-32,96,-87,41,-53,-73,-107,-104, 
  /* [12][0][][] */ 5,67,-30,18,75,7,29,41,-55,56,16,13,-17,54,84,-61,-38,-35,7,-37,23,18,35,92,-49,-48,127,-64,94,35,8,94,-61,-45,-7,30,22,-57,-3,27,107,42,-80,17,1,-62,-17,108, 
  /* [13][0][][] */ 93,-52,62,87,83,80,48,52,72,-82,-7,-14,85,52,48,-53,-127,-44,-82,36,65,-13,107,-34,-78,29,-19,23,-65,-92,59,9,43,86,-6,43,-73,-12,29,67,-70,71,-30,-8,-30,33,11,-14, 
  /* [14][0][][] */ -46,-90,65,66,71,-23,-36,-98,-65,-28,39,74,-24,-92,-103,-76,-65,-47,-14,28,-34,30,-1,51,-101,-70,-54,30,-100,-127,-89,21,95,-20,-29,6,82,104,34,-95,-13,-94,41,58,59,-94,60,-70, 
  /* [15][0][][] */ 38,-15,-11,71,110,-75,57,-94,61,8,-71,19,104,-5,-100,-102,109,16,-96,9,51,7,63,124,121,101,47,101,10,81,74,-85,5,25,-87,-17,-66,127,109,-61,35,124,-76,-23,27,-89,-64,-103, 
  /* [16][0][][] */ -71,-3,81,-50,51,98,-68,41,66,54,-127,86,1,-53,-58,-78,79,99,48,84,127,95,-25,60,-65,48,-91,75,-90,-5,35,-12,-95,79,74,76,-38,70,-38,-57,2,-37,94,75,72,118,121,1, 
  /* [17][0][][] */ 24,-112,68,72,-55,-114,-41,-107,31,-99,98,42,90,80,-103,49,74,43,122,102,-107,-23,6,-56,50,69,-70,15,101,-47,-23,102,-44,-27,23,-3,-50,93,-103,-42,-89,-52,-29,3,-2,2,71,-127, 
  /* [18][0][][] */ -74,91,127,-39,7,-100,-14,32,-13,88,-43,-30,-18,87,87,-63,66,-26,109,-12,93,-36,45,-69,14,-96,45,101,40,52,73,59,41,-12,-92,-98,11,20,-21,43,-25,19,-17,57,-81,20,18,3, 
  /* [19][0][][] */ 16,38,110,61,61,-62,103,104,75,-22,39,0,-56,47,4,49,127,-106,110,61,-15,75,-24,24,78,-68,49,-42,-32,-70,-36,63,68,-55,37,4,57,-55,-28,-97,54,-68,-36,27,-51,34,62,-61, 
  /* [20][0][][] */ 16,66,86,81,-72,99,50,56,14,14,-43,10,-5,62,38,-44,-16,-29,-40,-29,21,-39,-62,-55,101,-42,-66,42,21,25,-5,127,89,47,-13,51,39,-23,-17,-90,-56,-28,-79,-46,-21,-57,-62,91, 
  /* [21][0][][] */ 117,99,84,-104,117,-66,33,29,11,-59,-80,57,11,19,-69,-80,-123,-18,2,-10,127,-47,80,-79,84,-74,-53,89,10,15,-11,-8,20,36,-98,-112,123,119,-118,-21,1,18,34,-53,-96,-78,-78,106, 
  /* [22][0][][] */ 38,-43,-86,-70,82,-63,61,53,-67,79,-87,-78,105,-111,-97,-88,6,84,-112,-37,84,-51,37,31,40,4,-127,92,-40,-80,-58,-119,51,57,26,22,6,-1,-39,-84,-7,-1,18,62,54,-86,88,-8, 
  /* [23][0][][] */ 56,-89,-19,60,94,-125,-21,-100,65,-76,58,78,27,-115,7,-55,53,-16,-127,107,96,-66,107,-30,-41,-23,48,27,73,22,52,-61,-27,38,30,44,82,4,-96,15,-118,6,25,-125,-61,-76,118,36, 
  /* [24][0][][] */ -66,-50,-114,-67,-80,-96,-94,-89,80,127,71,58,123,48,-57,-99,-107,58,10,-46,109,-76,-53,-35,65,-16,54,66,108,43,-6,-59,8,18,56,39,-58,-75,70,-8,-76,-94,106,-10,27,-28,54,81, 
  /* [25][0][][] */ -95,-52,-81,17,97,-88,-106,54,56,-104,-47,20,93,-12,-90,-39,-60,66,30,-87,84,96,8,-59,-7,-67,-107,52,96,-100,29,102,105,-116,55,81,127,-58,-3,-24,-100,114,-62,-1,111,57,81,54, 
  /* [26][0][][] */ 43,-121,-30,-21,-104,-11,-19,-21,-112,-127,97,76,-86,-44,4,-20,99,21,-79,-71,5,63,86,8,43,53,-2,38,3,1,-95,-11,-37,-69,-95,-109,-73,74,-57,100,-103,92,47,15,-79,64,-46,93, 
  /* [27][0][][] */ 9,7,-75,-107,-124,-83,-68,-18,45,103,40,-116,-26,61,87,-40,68,-23,66,-87,-98,15,-26,-17,-127,37,-106,1,70,31,-31,-21,63,70,-86,-87,-93,-69,-113,89,-93,17,29,21,105,24,78,113, 
  /* [28][0][][] */ 53,18,123,63,-61,-40,-17,-10,-35,-44,86,60,-40,-40,92,68,127,69,19,63,-13,32,-51,-41,-49,55,11,-27,-14,5,25,51,-70,32,58,51,74,-80,-16,5,105,53,-39,88,-48,2,2,41, 
  /* [29][0][][] */ 44,43,49,-73,-117,-2,-117,-7,100,-32,-104,-124,112,-106,-67,-71,-126,104,33,-87,-102,-52,51,-10,-64,-10,-55,-47,-127,-27,125,-22,45,-15,-106,-80,-25,104,-23,96,42,111,-66,102,-15,110,-76,-42, 
  /* [30][0][][] */ 44,-41,-45,41,-82,41,-56,0,127,-2,12,-28,-94,7,48,29,-20,51,83,-100,53,-93,-105,26,-80,48,-70,124,-36,-90,-81,30,-67,-51,-115,-40,20,2,1,42,98,-61,-16,82,115,-31,107,63, 
  /* [31][0][][] */ 84,-98,50,110,55,65,35,-106,-35,-20,-51,-96,111,-19,-42,116,-44,-101,78,54,68,40,-24,120,52,-127,85,43,-72,-70,87,121,19,23,-96,-7,110,-36,-74,-124,70,-73,-29,114,8,-60,-43,28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0024586732033640146, 0.0022133036982268095, 0.0027328659780323505, 0.0027432453352957964, 0.0023926564026623964, 0.0025178755167871714, 0.0037224907428026199, 0.0024168116506189108, 0.0025274860672652721, 0.0026910726446658373, 0.0023108520545065403, 0.0022351499646902084, 0.0029875705949962139, 0.0028062965720891953, 0.002648201072588563, 0.0020900899544358253, 0.002262054942548275, 0.0022823135368525982, 0.0027045635506510735, 0.0028909749817103148, 0.002624844666570425, 0.0021399953402578831, 0.002801200607791543, 0.0024727401323616505, 0.0022550863213837147, 0.0023236623965203762, 0.0023541620466858149, 0.0022120822686702013, 0.0034253750927746296, 0.0019600947853177786, 0.0023586319293826818, 0.0021426805760711432, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { -201, 1051, 1842, 3199, 9244, -832, -989, 23164, 1124, 6184, 282, -944, 5007, -3177, 2536, -1732, 216, -1560, 935, 1367, 2711, 2504, 4083, 708, -1663, -1529, 794, 2013, 1612, 3207, -1240, 2497, 4432, 4055, 3019, 1168, 11526, 1327, 887, -984, 550, 10417, -414, 2184, 6567, 15, 1402, 5060, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00034100830089300871, 0.00030669677653349936, 0.00018472599913366139, 0.00018160165927838534, 0.00010214973735855892, 0.00014537225069943815, 0.00026121927658095956, 4.3995714804623276e-05, 0.00025714113144204021, 0.0001315951521974057, 0.00016006565419957042, 0.00037547439569607377, 0.00013099564239382744, 0.00019251277262810618, 0.0002875757054425776, 0.00014726382505614311, 0.00018693205493036658, 7.7764445450156927e-05, 0.00030553716351278126, 0.00040628013084642589, 0.00024520407896488905, 0.00018981870380230248, 0.00015861645806580782, 0.0002410618617432192, 0.00026185161550529301, 0.00027112089446745813, 0.00030081308796070516, 0.00026454351609572768, 0.00018992951663676649, 0.00019583031826186925, 0.00013848447997588664, 0.00027035668608732522, 0.00015891452494543046, 0.00018777503282763064, 0.00014107684546615928, 0.00019273576617706567, 7.926880061859265e-05, 0.00015868819900788367, 0.00013686447346117347, 0.00022465019719675183, 0.00037161970976740122, 8.5765568655915558e-05, 0.00035476984339766204, 0.0001327837526332587, 0.00012214705930091441, 0.00019626130233518779, 0.00019844842609018087, 0.00015941316087264568, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 20,-19,-66,15,-127,17,-71,-5, 
  /* [1][0][][] */ -119,47,124,1,-127,-30,1,-11, 
  /* [2][0][][] */ 17,79,-27,24,-59,-127,-24,90, 
  /* [3][0][][] */ -77,35,-16,127,10,-49,-57,-32, 
  /* [4][0][][] */ 12,-17,35,-115,-17,28,-127,15, 
  /* [5][0][][] */ 73,127,-55,-56,-49,-8,27,-116, 
  /* [6][0][][] */ 64,-54,52,102,-41,-127,-1,-97, 
  /* [7][0][][] */ 26,99,-53,-45,-47,-20,15,-127, 
  /* [8][0][][] */ 0,-26,49,-8,7,8,-54,-127, 
  /* [9][0][][] */ -77,4,-103,18,-127,-83,-81,-21, 
  /* [10][0][][] */ 89,-12,106,-31,-127,8,118,111, 
  /* [11][0][][] */ 127,-29,-73,4,47,1,-71,-8, 
  /* [12][0][][] */ -26,-107,127,16,23,16,-82,63, 
  /* [13][0][][] */ 37,-65,75,-17,10,-127,56,-124, 
  /* [14][0][][] */ -124,22,127,15,-25,-72,62,-49, 
  /* [15][0][][] */ 46,127,-25,-73,-78,-1,35,-105, 
  /* [16][0][][] */ 42,107,-49,59,-9,-32,-23,127, 
  /* [17][0][][] */ 32,68,-8,72,-57,82,-127,33, 
  /* [18][0][][] */ 69,-44,127,-31,84,-105,8,-27, 
  /* [19][0][][] */ 5,-14,17,127,32,-36,-43,-100, 
  /* [20][0][][] */ 9,18,-22,36,-13,54,-127,6, 
  /* [21][0][][] */ 9,-9,53,30,29,127,56,-48, 
  /* [22][0][][] */ 55,-127,-13,66,-72,70,14,15, 
  /* [23][0][][] */ -43,-98,-11,-109,-2,-65,-13,-127, 
  /* [24][0][][] */ 31,22,-7,-78,-51,-127,-60,47, 
  /* [25][0][][] */ 62,78,127,12,1,23,-55,-1, 
  /* [26][0][][] */ -127,22,110,-40,-70,1,90,-15, 
  /* [27][0][][] */ -69,41,-28,-100,21,127,-25,81, 
  /* [28][0][][] */ 18,-106,66,48,45,6,-29,127, 
  /* [29][0][][] */ -94,55,73,-46,-127,16,86,-45, 
  /* [30][0][][] */ 103,-115,6,80,-127,-27,56,-89, 
  /* [31][0][][] */ 52,76,53,-31,-101,-24,12,127, 
  /* [32][0][][] */ -33,-7,86,-51,20,-4,-127,-99, 
  /* [33][0][][] */ 51,44,103,-127,22,52,-43,61, 
  /* [34][0][][] */ -18,-110,84,-25,38,127,54,-94, 
  /* [35][0][][] */ 29,5,82,15,21,127,13,-48, 
  /* [36][0][][] */ -30,33,-26,59,67,-127,-1,15, 
  /* [37][0][][] */ 31,-18,55,16,-127,110,-31,-16, 
  /* [38][0][][] */ -127,-19,-109,-15,86,-39,-107,-21, 
  /* [39][0][][] */ 13,3,31,-106,-30,49,-127,14, 
  /* [40][0][][] */ 92,-19,-74,-127,58,54,55,-17, 
  /* [41][0][][] */ 17,-24,-5,127,-92,6,-74,-49, 
  /* [42][0][][] */ -85,15,73,127,-54,-55,-60,1, 
  /* [43][0][][] */ 74,-102,97,42,-127,24,116,54, 
  /* [44][0][][] */ 7,-36,37,-69,-27,127,32,11, 
  /* [45][0][][] */ -39,30,-45,8,82,-54,-127,-38, 
  /* [46][0][][] */ -106,-95,-12,-14,29,127,-45,-115, 
  /* [47][0][][] */ -122,-84,-52,34,21,127,-36,-62, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0038660692516714334, 0.0034770737402141094, 0.0020942701958119869, 0.0020588489715009928, 0.0011580890277400613, 0.001648109988309443, 0.0029614877421408892, 0.00049878691788762808, 0.0029152529314160347, 0.0014919167151674628, 0.0018146916991099715, 0.0042568175122141838, 0.0014851200394332409, 0.0021825502626597881, 0.0032602949067950249, 0.0016695552039891481, 0.0021192806307226419, 0.00088162883184850216, 0.0034639271907508373, 0.0046060672029852867, 0.0027799205854535103, 0.0021520070731639862, 0.0017982618883252144, 0.0027329595759510994, 0.0029686563648283482, 0.0030737437773495913, 0.0034103693906217813, 0.0029991751071065664, 0.0021532634273171425, 0.0022201617248356342, 0.0015700221993029118, 0.0030650799162685871, 0.0018016411922872066, 0.0021288376301527023, 0.0015994122950360179, 0.0021850783377885818, 0.00089868396753445268, 0.0017990751657634974, 0.0015516559360548854, 0.0025468976236879826, 0.0042131161317229271, 0.00097233889391645789, 0.0040220865048468113, 0.001505392137914896, 0.0013848020462319255, 0.0022250479087233543, 0.0022498436737805605, 0.0018072942038998008, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -4437, 727, -14724, 11351, 8521, -4236, 9896, 3529, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00010217803355772048, 0.00013602271792478859, 7.2338378231506795e-05, 0.00011494506179587916, 0.00013420445611700416, 7.5783871579915285e-05, 0.00016552966553717852, 0.0001061368893715553, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 16,39,34,34,-7,-35,54,56,1,22,-12,-8,50,-36,45,-22,-55,-31,-127,-8,48,-38,29,44,12,-11,46,-7,-7,-53,8,43,-43,43,48,12,52,84,-57,-52,5,18,-103,-51,34,27,-25,-59, 
  /* [1][0][][] */ -16,-39,-3,72,-20,-2,-8,-14,11,10,-12,-41,-1,-1,11,1,40,22,50,-32,5,28,36,-40,-5,-12,-22,-36,-35,4,-16,-4,-30,-35,-95,70,8,24,-127,-17,24,-18,66,25,100,-12,-43,37, 
  /* [2][0][][] */ -3,-2,25,-36,-21,-16,-14,124,-41,80,-39,-9,127,-6,49,-14,-51,-69,-7,37,-13,-21,24,0,4,64,4,41,14,15,75,30,-66,-14,31,56,4,69,63,-110,43,36,-39,-28,19,37,-2,-8, 
  /* [3][0][][] */ 18,1,-127,-24,16,-14,47,-39,-17,-16,-3,18,-55,-52,41,18,11,58,7,30,-54,25,-72,-11,-35,-81,34,9,-68,-65,-63,10,82,47,-41,13,-60,-7,28,-23,33,-66,-23,21,53,-50,41,-11, 
  /* [4][0][][] */ 6,39,3,-8,26,-8,-73,-120,-31,27,-19,70,1,-23,-6,54,42,50,-75,0,20,-3,-38,-8,43,-16,0,6,-17,9,-2,-38,26,-22,-127,26,-32,-6,41,32,-30,-31,73,44,17,-57,15,17, 
  /* [5][0][][] */ -51,-38,98,8,81,27,67,-2,-127,-5,-109,-28,-82,-91,56,86,-19,28,23,4,41,20,28,2,-24,8,-5,-8,-46,4,-16,-20,-32,47,68,32,-1,73,-16,-5,59,-36,-56,49,-8,12,41,33, 
  /* [6][0][][] */ 87,58,-15,28,29,-30,-119,-76,3,7,0,74,-27,-26,0,35,-37,33,17,-6,126,-28,58,127,10,-65,14,-31,-59,-23,-37,-69,53,-37,24,-15,-13,33,-53,41,-58,-50,-65,-37,-24,-50,46,-10, 
  /* [7][0][][] */ 3,53,39,-79,59,-48,-44,-20,2,14,37,28,-42,-3,31,-13,-20,25,-22,55,-50,-4,-14,63,9,-39,7,33,-7,29,-43,-15,48,-12,-33,-44,-72,10,127,-11,15,-36,-23,-13,41,7,60,-1, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0043425662443041801, 0.0057809655554592609, 0.0030743810348212719, 0.0048851650208234787, 0.0057036895304918289, 0.0032208145130425692, 0.0070350104942917824, 0.0045108175836503506, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { -312, -3679, 612, -1344, 87, -626, 2427, 14043, -5400, 13848, 8297, -2221, 4709, -4449, 3753, -1194, 1240, 269, 2967, -2197, -4326, -2463, -12681, -1790, 5557, -673, 728, 971, 9045, 7103, 8330, -2161, -5887, -820, -2302, -5077, 5461, 10424, -3524, 11381, 2830, 389, -3299, -4187, -8454, 7851, -98, 4694, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 9.9906952527817339e-05, 0.00024014990776777267, 0.00019995383627247065, 0.00027069859788753092, 0.0001622425188543275, 0.00034109421540051699, 0.00022904951765667647, 0.00050888402620330453, 0.00023491882893722504, 9.0958943474106491e-05, 0.00015632604481652379, 0.00019354891264811158, 0.00018422339053358883, 0.00034970097476616502, 0.00021382397972047329, 0.00014415150508284569, 0.00059902615612372756, 0.00033708795672282577, 8.2248756370972842e-05, 0.00026265377528034151, 0.00019018269085790962, 0.0001916402397910133, 0.00010003040370065719, 0.00037903388147242367, 0.00012807983148377389, 0.00036179216112941504, 0.00011677212023641914, 0.00021979057055432349, 0.00016927736578509212, 8.1733873230405152e-05, 0.0001722236629575491, 0.00015660846838727593, 0.00025729375192895532, 0.00027633554418571293, 0.000342961197020486, 0.00015308825823012739, 0.00011713869753293693, 0.00011571760842343792, 0.0004020047199446708, 0.00014293342246674001, 0.00023683340987190604, 0.00028803417808376253, 0.00015281728701665998, 0.00030675024027004838, 0.00020766023953910917, 0.00011612602247623727, 0.00012074661935912445, 0.00013179410598240793, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 59,79,53,66,-12,-78,39,27,-62,-19,-27,64,48,25,-2,25,55,-48,102,42,82,-7,-8,3,-27,-61,59,17,-20,-72,38,44,25,-77,-1,29,-30,23,4,-113,-8,-99,-31,0,11,-114,62,-127, 127,8,72,-88,46,61,41,-55,-101,-93,28,127,12,-40,-127,17,-2,96,65,35,22,94,75,36,127,-49,-17,-127,-111,-27,-116,127,33,-81,-84,127,41,-81,-79,-127,12,127,-84,42,-30,-51,94,10, 37,15,21,-69,-18,-66,39,11,-39,5,2,38,32,35,45,7,-56,8,82,36,-12,-30,-87,0,-22,-60,-68,-15,-53,-91,2,-1,46,-31,36,20,-70,-78,6,-74,-1,-34,105,-12,0,-127,22,-65, 
  /* [0][1][][] */ 59,19,29,102,55,90,10,-127,107,-127,-109,-78,5,60,-41,127,-127,79,69,70,25,116,95,-51,-27,127,110,33,31,-52,-127,34,59,103,-80,35,-77,-9,12,-60,-22,-62,16,-77,45,1,45,-9, 15,127,-127,100,127,85,-127,26,106,-30,-6,59,-127,127,-15,4,38,-127,-127,26,102,55,127,-116,-84,99,-25,6,-10,-39,45,-28,127,-6,112,-73,109,-107,127,91,127,64,-127,7,122,66,-127,-3, 12,11,8,-127,48,55,23,-99,127,-23,-127,-17,20,41,-38,92,68,-13,26,90,48,-127,52,127,-57,121,-60,1,27,-27,-59,47,-8,83,127,42,-81,-32,-56,-19,-30,-42,114,127,127,-6,72,0, 
  /* [0][2][][] */ 24,49,35,84,-22,2,36,27,1,-31,6,-11,54,-47,44,-26,-6,25,80,-29,127,-1,0,-78,-106,-62,127,93,9,-99,-71,95,37,43,-20,9,-78,-2,13,-7,-22,-81,26,-1,13,5,44,-58, 65,2,10,11,-30,-127,0,-84,-15,-57,26,-34,0,-41,-8,42,2,-47,23,127,74,104,53,30,32,-38,-77,54,-127,-25,-71,43,21,127,-58,13,-127,-127,33,-35,-100,74,-23,24,-28,-52,105,-23, 1,17,33,-53,-4,-2,45,27,-8,10,23,6,48,-42,56,-7,-10,-27,66,-90,29,-75,-81,59,-65,-67,-119,33,-27,-127,22,46,39,-21,-3,42,-124,-92,-30,-24,-25,-18,-14,18,4,28,-17,-39, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0042460453696548939, 0.010206370614469051, 0.0084980381652712822, 0.011504690162837505, 0.0068953069858253002, 0.01449650339782238, 0.0097346045076847076, 0.021627571433782578, 0.0099840499460697174, 0.0038657549303025007, 0.0066438568755984306, 0.0082258284091949463, 0.0078294938430190086, 0.01486229058355093, 0.0090875187888741493, 0.0061264387331902981, 0.02545861154794693, 0.014326238073408604, 0.0034955721348524094, 0.01116278488188982, 0.0080827642232179642, 0.0081447102129459381, 0.0042512919753789902, 0.016108939424157143, 0.0054433927871286869, 0.015376166440546513, 0.0049628149718046188, 0.0093410992994904518, 0.0071942876093089581, 0.0034736895468086004, 0.0073195057921111584, 0.0066558597609400749, 0.010934984311461449, 0.011744260787963867, 0.014575851149857044, 0.0065062507055699825, 0.0049783946014940739, 0.0049179983325302601, 0.017085200175642967, 0.0060746702365577221, 0.010065419599413872, 0.012241452932357788, 0.0064947344362735748, 0.013036885298788548, 0.008825560100376606, 0.0049353558570146561, 0.0051317312754690647, 0.005601249635219574, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { -1449, -1558, 3880, -792, -2622, 1841, 1913, 20145, 2624, 2685, 5179, 2582, 1350, 6304, 5484, -1893, 9947, 2113, 818, -2370, 409, -278, 1462, 10615, 1057, 6114, 2905, 51, 7258, 280, 2154, -1347, -1419, -1546, -5866, 1535, 2910, 2135, 2224, 2499, 2549, 831, 4791, 2558, 12794, 4548, -1635, 653, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00022592194727621973, 0.00026589439949020743, 0.00018441096472088248, 0.00016320562281180173, 0.00019646341388579458, 0.00013630629109684378, 0.00026747229276224971, 6.180509808473289e-05, 0.0001224188890773803, 0.00021463762095663697, 0.00015564649947918952, 0.00016554364992771298, 0.00022901737247593701, 0.00013234451762400568, 0.0001371489925077185, 0.00021923142776358873, 9.525231143925339e-05, 0.00013144050899427384, 0.00031349429627880454, 0.00025132467271760106, 0.00013005550135858357, 0.00031295319786295295, 0.00021638412727043033, 8.908830932341516e-05, 0.0002104528684867546, 0.00011003735562553629, 0.00021084029867779464, 0.00023943516134750098, 7.4015697464346886e-05, 0.00027736861375160515, 0.00014045358693692833, 0.00028896777075715363, 0.00028175162151455879, 0.00016190977476071566, 8.9668814325705171e-05, 0.000270076998276636, 0.00015472827362827957, 0.00019740319112315774, 0.00020264930208213627, 0.0001823162310756743, 0.00026006140979006886, 0.00026127119781449437, 0.00014628653298132122, 0.00017882868996821344, 6.9707435613963753e-05, 0.00015641676145605743, 0.00012879146379418671, 0.00028500222833827138, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -8,-59,-45,100,8,-78,-74,-127, 
  /* [1][0][][] */ 127,-20,33,-27,30,-77,-5,30, 
  /* [2][0][][] */ -12,55,9,-127,7,93,-71,57, 
  /* [3][0][][] */ -27,127,-58,-93,-85,9,23,-69, 
  /* [4][0][][] */ -1,-62,-80,-32,26,-74,-60,-127, 
  /* [5][0][][] */ -55,-78,70,45,27,126,36,-127, 
  /* [6][0][][] */ 1,16,-38,40,6,9,-127,-38, 
  /* [7][0][][] */ 14,-20,10,25,-38,46,127,67, 
  /* [8][0][][] */ 4,61,-103,-20,-36,-127,-86,74, 
  /* [9][0][][] */ 74,10,-45,-31,-1,127,-32,117, 
  /* [10][0][][] */ -8,74,68,127,79,115,-7,-45, 
  /* [11][0][][] */ -38,-83,-15,52,-127,70,-10,-9, 
  /* [12][0][][] */ -9,40,94,-85,64,-110,-127,-78, 
  /* [13][0][][] */ 63,28,-88,-127,-35,-48,-60,103, 
  /* [14][0][][] */ -29,-127,16,-56,-3,-69,23,-100, 
  /* [15][0][][] */ -7,71,72,111,106,127,-11,-26, 
  /* [16][0][][] */ 46,6,-22,-127,42,88,-66,89, 
  /* [17][0][][] */ -99,88,-127,35,18,96,-77,26, 
  /* [18][0][][] */ -127,61,16,-24,-83,13,-19,7, 
  /* [19][0][][] */ 127,-4,-34,-25,77,-60,75,-87, 
  /* [20][0][][] */ 127,-57,36,-27,-71,24,87,12, 
  /* [21][0][][] */ 27,-46,-25,35,-15,38,127,24, 
  /* [22][0][][] */ 109,45,-127,-113,0,122,60,104, 
  /* [23][0][][] */ -46,22,-30,-114,40,22,-127,4, 
  /* [24][0][][] */ 127,-49,-111,-16,103,-47,-1,12, 
  /* [25][0][][] */ -39,-67,59,-40,68,127,-37,-110, 
  /* [26][0][][] */ 29,-87,56,31,127,-56,-46,-87, 
  /* [27][0][][] */ -31,-127,55,105,19,-3,-56,107, 
  /* [28][0][][] */ -18,48,-112,-53,111,-120,-29,127, 
  /* [29][0][][] */ -99,46,127,-108,34,-41,42,50, 
  /* [30][0][][] */ 107,-87,81,-25,-60,-127,67,-23, 
  /* [31][0][][] */ 20,32,47,-8,-27,-10,-127,6, 
  /* [32][0][][] */ 20,-14,25,127,-30,-87,-47,-87, 
  /* [33][0][][] */ 86,-79,-55,127,-93,89,-67,-17, 
  /* [34][0][][] */ 27,-90,12,-73,-115,127,26,-44, 
  /* [35][0][][] */ 20,127,86,15,9,10,-61,-6, 
  /* [36][0][][] */ 21,111,-80,-127,-93,10,97,-74, 
  /* [37][0][][] */ 42,-8,51,27,49,127,75,30, 
  /* [38][0][][] */ -66,-107,115,59,18,-1,-60,127, 
  /* [39][0][][] */ 11,30,127,-46,-28,38,-26,24, 
  /* [40][0][][] */ 14,-7,25,7,4,-25,127,1, 
  /* [41][0][][] */ -13,-3,-72,-127,-73,-90,-68,44, 
  /* [42][0][][] */ 37,-16,57,-31,-127,-50,-50,17, 
  /* [43][0][][] */ 78,-10,37,15,-73,-127,126,19, 
  /* [44][0][][] */ -76,-127,-15,-90,-10,8,1,-120, 
  /* [45][0][][] */ 18,88,75,62,41,127,-54,35, 
  /* [46][0][][] */ -104,-26,5,70,116,61,-80,127, 
  /* [47][0][][] */ 17,82,-50,-45,7,-27,23,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.003282549325376749, 0.0038633320946246386, 0.0026794124860316515, 0.0023713079281151295, 0.0028545295353978872, 0.0019804721232503653, 0.0038862579967826605, 0.00089800171554088593, 0.0017786941025406122, 0.0031185930129140615, 0.0022614770568907261, 0.00240527861751616, 0.0033275245223194361, 0.0019229094032198191, 0.001992716221138835, 0.0031853390391916037, 0.0013839753810316324, 0.0019097743788734078, 0.0045549380593001842, 0.0036516401451081038, 0.0018896508263424039, 0.0045470762997865677, 0.0031439689919352531, 0.0012944150948897004, 0.0030577902216464281, 0.0015987957594916224, 0.0030634193681180477, 0.0034788905177265406, 0.0010754164541140199, 0.0040300474502146244, 0.0020407305564731359, 0.0041985781863331795, 0.0040937308222055435, 0.0023524798452854156, 0.0013028496177867055, 0.0039241034537553787, 0.0022481356281787157, 0.0028681841213256121, 0.0029444077517837286, 0.0026489768642932177, 0.0037785810418426991, 0.0037961590569466352, 0.0021254809107631445, 0.0025983045343309641, 0.0010128192370757461, 0.0022726687602698803, 0.001871284912340343, 0.004140960518270731, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { 16750, 4616, 14524, -6956, -13506, 10415, 4266, 15977, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 6.4903419115580618e-05, 7.9355522757396102e-05, 5.7356213801540434e-05, 8.040544344112277e-05, 8.2571357779670507e-05, 0.00010505679529160261, 7.4428913649171591e-05, 6.8545894464477897e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-20,-11,-16,-33,-89,-34,-11,45,-33,-50,-32,-28,75,-57,14,4,-5,2,10,30,-31,-3,2,39,6,10,23,15,53,-45,-88,12,-56,11,-30,39,-37,-8,31,-52,-16,-29,-44,-78,-89,8,-25, 
  /* [1][0][][] */ -77,-2,95,-57,61,43,46,15,-14,21,1,101,30,-29,-127,-58,-106,-87,41,-12,-3,95,-47,1,13,-98,50,110,42,-24,28,49,39,40,4,28,-68,-31,25,21,-2,-31,-106,24,-21,-50,-110,23, 
  /* [2][0][][] */ 91,37,-23,-65,-44,-4,-38,-87,47,28,-86,-45,-17,52,-62,38,-13,75,15,20,58,49,-1,2,-122,13,26,-60,-2,43,38,-88,16,-34,18,19,-62,-54,23,27,-127,-124,-25,-48,-37,-90,34,13, 
  /* [3][0][][] */ 22,6,18,30,-99,-20,-5,51,-35,-65,-15,78,12,-17,-78,-55,-24,37,1,-68,-41,127,21,-50,24,42,54,-52,16,10,17,28,35,20,23,3,41,63,18,3,36,-30,31,-49,-14,16,31,41, 
  /* [4][0][][] */ -45,20,-127,10,-10,90,28,28,-25,123,35,58,29,-65,-14,27,-11,-8,-16,29,-5,36,-77,16,-2,-11,52,-7,41,-76,125,96,45,46,1,-48,-87,17,-2,-30,56,20,23,43,46,36,27,62, 
  /* [5][0][][] */ -33,-4,38,-15,54,-71,-33,-29,-29,-59,2,-31,39,-2,-19,1,22,-9,6,40,19,58,14,13,18,-6,-34,-10,-38,1,-127,-13,-42,-8,20,-19,-3,-34,9,-23,-11,3,-34,-9,32,34,-6,44, 
  /* [6][0][][] */ 11,56,-12,68,-13,37,-64,49,-83,-38,51,14,47,17,48,19,7,-43,-54,23,6,63,39,-31,-92,-8,-32,19,-97,-3,-83,-3,11,-43,-39,-54,127,-1,-51,-59,51,30,36,-61,-74,-17,-57,-47, 
  /* [7][0][][] */ -49,14,-94,33,-21,-13,-17,-14,-58,-49,44,63,49,21,-62,-70,-76,95,-5,-20,49,18,39,-36,-50,109,-50,-109,-44,-17,-117,-9,-23,-44,-57,3,-20,-37,-45,-18,-22,48,50,-22,-66,-64,127,-69, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0027583951596170664, 0.0033726096153259277, 0.0024376390501856804, 0.0034172311425209045, 0.0035092826001346111, 0.0044649136252701283, 0.0031632287427783012, 0.0029132005292922258, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 7810, 4956, 7345, 9029, 40574, -2757, -2355, -123, -219, -12543, -1778, -1970, 17889, 7523, 4877, -1743, 5988, 9012, 330, -4011, 7863, -2117, 9300, 116, 4868, 10029, -408, -693, -933, 550, 6918, 3988, 1599, -1415, 2220, 1128, 6104, 3916, 281, -188, 5646, -5740, 5532, -667, -521, 1621, 6401, -1686, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00028135126922279596, 0.00014495871437247843, 0.00011003525287378579, 0.00017900791135616601, 4.4929704017704353e-05, 0.00036458502290770411, 0.00018319468654226512, 0.00036030550836585462, 0.00041997813968919218, 0.00023383632651530206, 0.00013934026355855167, 0.00026095734210684896, 6.2220577092375606e-05, 0.00013510968710761517, 0.00032503626425750554, 0.00014047739387024194, 0.00013857138401363045, 0.00014866975834593177, 0.00036625823122449219, 0.0002014189085457474, 0.00013477017637342215, 0.00019448112288955599, 0.00015030600479803979, 0.00020496039360295981, 0.00020254167611710727, 0.00013765368203166872, 0.00050857319729402661, 0.00019102994701825082, 0.00038527522701770067, 0.00027722460799850523, 0.0001846263330662623, 0.0003550737164914608, 0.00028622537502087653, 0.00085486081661656499, 0.00014194933464750648, 0.00015553241246379912, 0.00026184567832387984, 0.00019292360229883343, 0.00021519376605283469, 0.00022912969870958477, 0.00020713344565592706, 0.00021178880706429482, 0.00026770826661959291, 0.00038403956568799913, 0.00044826156226918101, 0.00035972567275166512, 0.00023621608852408826, 0.00037368014454841614, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -114,-26,35,-16,-121,17,-113,-3,-11,127,51,4,-40,67,5,30,15,13,31,13,-119,-23,-16,48,-22,3,-6,-61,31,-102,96,39,-12,36,41,-41,26,-127,-10,127,-67,39,-13,-1,-8,14,5,-1, 10,-127,-24,18,-33,22,-99,-5,22,31,127,64,-75,-93,-91,-60,-16,-47,116,117,14,51,-86,14,-68,-10,7,-127,15,-60,-25,-121,-10,23,-50,-127,-16,-7,32,102,127,-13,-20,127,6,-127,5,-22, -127,25,35,-3,-127,30,-66,-1,-6,101,-18,-19,-50,57,18,61,-31,-7,20,-22,-108,-36,42,18,6,-32,17,-36,-33,-110,55,-5,6,13,-53,-38,21,-99,28,94,-62,27,-15,7,2,18,13,47, 
  /* [0][1][][] */ 53,-40,25,-12,-104,10,52,-17,-60,69,27,41,-106,-21,-72,127,-22,-8,60,89,-8,49,-127,-14,-31,-103,-23,-56,127,42,43,127,-127,-1,102,0,-3,46,-127,-121,48,-20,13,13,-127,49,-2,-42, 117,-46,-127,-127,71,127,7,127,-127,-109,-29,127,-112,-127,-127,-123,-12,-127,-77,44,127,127,-66,82,-127,96,-115,109,-57,-48,-127,-97,15,127,-127,92,-127,-47,127,-39,-56,127,-127,-64,111,100,-127,-71, 56,-3,71,-10,-79,-19,18,-24,-37,24,-1,-16,-42,-75,-76,116,-127,-53,29,127,-42,45,3,-127,15,-84,127,7,-54,127,-48,101,105,-49,-54,16,-8,7,-20,-56,29,-25,-11,-10,-5,44,-22,127, 
  /* [0][2][][] */ -116,-42,49,-29,-44,20,76,-8,84,64,81,22,-92,78,20,2,53,38,11,-7,-65,-23,16,30,-24,-22,-11,18,7,44,88,-17,-12,15,78,10,23,-24,-59,-2,-39,15,3,-11,-7,-20,-21,-2, -75,-121,70,-48,-67,-6,127,-8,90,43,98,-28,127,-111,-68,-16,-34,22,-127,35,-83,8,-100,-15,16,-127,-6,49,7,71,18,-108,-11,-50,-20,20,-8,61,42,-54,1,15,24,-41,28,-38,-16,1, -66,5,34,-10,-79,45,49,-7,40,26,11,28,-104,39,31,16,-56,38,4,-15,-55,-32,104,-66,-12,-28,11,39,-17,30,29,-52,-13,25,-29,12,27,-32,-15,-43,-30,37,15,-2,-4,-5,-2,-12, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.01195742841809988, 0.0061607449315488338, 0.004676498007029295, 0.0076078362762928009, 0.0019095123279839754, 0.015494863502681255, 0.0077857743017375469, 0.015312983654439449, 0.017849070951342583, 0.0099380435422062874, 0.0059219612739980221, 0.011090686544775963, 0.0026443745009601116, 0.0057421615347266197, 0.013814040459692478, 0.0059702889993786812, 0.0058892834931612015, 0.0063184644095599651, 0.01556597463786602, 0.0085603035986423492, 0.0057277325540781021, 0.0082654478028416634, 0.006388004869222641, 0.008710816502571106, 0.0086080208420753479, 0.0058502811007201672, 0.021614361554384232, 0.008118772879242897, 0.016374196857213974, 0.011782045476138592, 0.0078466190025210381, 0.015090632252395153, 0.012164577841758728, 0.036331582814455032, 0.0060328468680381775, 0.0066101276315748692, 0.011128440499305725, 0.0081992531195282936, 0.0091457348316907883, 0.0097380122169852257, 0.0088031711056828499, 0.009001024067401886, 0.011377600952982903, 0.016321681439876556, 0.019051115959882736, 0.015288340859115124, 0.010039183311164379, 0.015881406143307686, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 18214, -313, 1324, 1673, 2546, 1090, 6176, -400, 10293, 8305, -989, 111, 1554, 976, 460, 2550, 3468, 2782, -1649, -820, 2484, 2523, 3013, 116, 3613, 2408, 6077, -509, 4759, -578, 6278, 6462, 2737, 962, 1118, 2126, 2521, 1695, 1628, 1788, -265, 3561, 2046, 4650, 4654, 1707, 129, 2186, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 5.9687172324629501e-05, 0.00044666300527751446, 0.00033668588730506599, 0.00022579118376597762, 0.00026870248257182539, 0.00016186242282856256, 0.00010434065188746899, 0.00029979334794916213, 8.7629312474746257e-05, 9.1058471298310906e-05, 0.00014662591274827719, 0.00018764790729619563, 0.00031768865301273763, 0.00030102118034847081, 0.0001093334867618978, 0.00026108187739737332, 0.00015711948799435049, 0.00026886060368269682, 0.000218053231947124, 0.00018714040925260633, 0.00027597183361649513, 0.00014376967737916857, 0.00020957131346222013, 0.00032480570371262729, 0.00018373609054833651, 0.00029630362405441701, 0.00014733386342413723, 0.00048405182315036654, 0.00018388686294201761, 0.00013353247777558863, 0.00012767317821271718, 9.9659213447012007e-05, 0.00032595943775959313, 0.00011798391642514616, 0.00027222110657021403, 0.00032700641895644367, 0.00023990141926333308, 0.00026189917116425931, 0.00033534134854562581, 0.00014425991685129702, 0.00028527516406029463, 0.00019141822122037411, 0.000360581383574754, 0.00013796720304526389, 0.00018787344743032008, 0.00015907148190308362, 0.00028797710547223687, 0.00030982380849309266, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 67,-95,41,-5,54,-127,-7,-82, 
  /* [1][0][][] */ -44,-56,-67,50,-127,56,-37,11, 
  /* [2][0][][] */ 72,-49,52,-18,127,-35,-5,80, 
  /* [3][0][][] */ -15,127,-24,116,14,8,-54,-46, 
  /* [4][0][][] */ -35,127,76,-39,52,25,-55,24, 
  /* [5][0][][] */ -93,25,-3,10,127,-23,82,-16, 
  /* [6][0][][] */ 127,-91,103,30,28,109,121,-31, 
  /* [7][0][][] */ -26,-41,54,50,77,16,-49,127, 
  /* [8][0][][] */ 37,-7,-52,-106,-21,127,-109,23, 
  /* [9][0][][] */ -127,26,-86,-10,102,-41,-57,14, 
  /* [10][0][][] */ -15,-96,57,31,-43,-99,-127,-97, 
  /* [11][0][][] */ 52,85,-18,1,-20,-77,30,127, 
  /* [12][0][][] */ 44,-41,-101,42,-80,127,40,85, 
  /* [13][0][][] */ -42,-33,-127,17,-99,78,25,34, 
  /* [14][0][][] */ -60,127,-79,78,87,38,-15,81, 
  /* [15][0][][] */ -84,-10,-17,9,82,61,-71,-127, 
  /* [16][0][][] */ 88,-127,-99,-38,-64,119,-53,-11, 
  /* [17][0][][] */ 24,127,-97,-58,-79,29,65,-106, 
  /* [18][0][][] */ -98,-113,60,39,127,-86,-58,80, 
  /* [19][0][][] */ -77,90,-23,31,-3,-87,-127,33, 
  /* [20][0][][] */ 86,-26,42,-61,-16,-74,37,127, 
  /* [21][0][][] */ 63,-37,127,105,-45,108,95,-26, 
  /* [22][0][][] */ -31,103,13,15,127,-84,-100,-74, 
  /* [23][0][][] */ 25,-49,31,127,6,-54,72,-25, 
  /* [24][0][][] */ -30,59,127,-65,-24,-30,18,-29, 
  /* [25][0][][] */ -51,-109,89,63,32,-11,-39,127, 
  /* [26][0][][] */ 61,-18,-127,-116,-111,51,34,121, 
  /* [27][0][][] */ 37,127,-102,-54,-35,26,20,-105, 
  /* [28][0][][] */ -22,50,-54,-94,-11,-39,-127,-37, 
  /* [29][0][][] */ -96,66,-127,-60,125,65,-64,-1, 
  /* [30][0][][] */ 80,-63,14,-32,-126,127,124,69, 
  /* [31][0][][] */ -60,81,-33,72,127,-69,-10,10, 
  /* [32][0][][] */ 2,77,43,-52,127,-31,-20,-81, 
  /* [33][0][][] */ -127,60,-126,9,49,23,-25,9, 
  /* [34][0][][] */ 66,-25,73,-93,-47,-127,54,98, 
  /* [35][0][][] */ -127,38,43,-23,-84,-1,-10,16, 
  /* [36][0][][] */ 0,-47,-35,39,-17,11,127,33, 
  /* [37][0][][] */ -30,-20,-75,-39,-28,-127,-74,-6, 
  /* [38][0][][] */ -122,22,18,27,-127,32,41,1, 
  /* [39][0][][] */ -60,-28,23,-21,-38,73,-127,-116, 
  /* [40][0][][] */ 73,-127,25,57,-59,-53,108,55, 
  /* [41][0][][] */ 27,127,89,39,26,32,-93,-35, 
  /* [42][0][][] */ 31,127,-31,-11,-28,20,-11,-48, 
  /* [43][0][][] */ -83,77,-84,-127,8,15,-84,88, 
  /* [44][0][][] */ -42,20,-25,1,30,127,-8,-7, 
  /* [45][0][][] */ 3,77,-87,-48,-74,-92,-6,127, 
  /* [46][0][][] */ 28,121,-105,-34,-71,25,10,-127, 
  /* [47][0][][] */ 19,8,-3,-53,-63,-127,-31,34, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00081032339949160814, 0.0060639744624495506, 0.0045709060505032539, 0.0030653802677989006, 0.0036479516420513391, 0.0021974723786115646, 0.0014165467582643032, 0.0040700463578104973, 0.0011896707583218813, 0.001236225594766438, 0.0019906188827008009, 0.0025475404690951109, 0.0043129962868988514, 0.0040867156349122524, 0.0014843303943052888, 0.0035444928798824549, 0.0021330814342945814, 0.0036500981077551842, 0.0029603284783661366, 0.0025406505446881056, 0.0037466415669769049, 0.0019518419867381454, 0.0028451764956116676, 0.0044096186757087708, 0.0024944329634308815, 0.0040226695127785206, 0.0020002301316708326, 0.0065715713426470757, 0.0024964800104498863, 0.0018128601368516684, 0.0017333131982013583, 0.0013529907446354628, 0.0044252816587686539, 0.0016017700545489788, 0.0036957208067178726, 0.0044394959695637226, 0.0032569433096796274, 0.0035555886570364237, 0.0045526521280407906, 0.001958497567102313, 0.0038729452062398195, 0.0025987268891185522, 0.0048953155055642128, 0.0018730666488409042, 0.0025506024248898029, 0.0021595819853246212, 0.0039096269756555557, 0.0042062215507030487, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 6729, -1521, -2300, 2690, 2469, -19394, -3885, -9997, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00023930445604491979, 0.00019922609499190003, 0.00019593753677327186, 0.00016738761041779071, 0.00015682903176639229, 0.00012518234143499285, 0.00021583857596851885, 0.00011338145122863352, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -25,20,1,28,-21,12,-2,29,-46,-7,-36,-3,-15,14,36,3,-49,-20,32,-17,-27,127,-19,-20,-21,-38,5,31,-34,36,8,-25,-11,19,33,37,16,3,26,-25,3,-34,-18,-12,-21,23,21,13, 
  /* [1][0][][] */ 14,53,0,52,34,33,41,110,-49,-48,85,-32,-41,-35,24,-24,-21,-3,39,4,26,-127,-7,-69,5,8,-11,16,-6,11,-35,-61,-38,3,19,-13,18,65,70,-17,24,25,44,-32,-38,47,8,49, 
  /* [2][0][][] */ -4,27,4,24,24,20,-27,33,18,13,63,17,8,-10,34,-48,21,27,-7,10,-13,127,8,-7,19,-43,-4,3,-23,29,-19,-56,-11,7,20,-36,33,-13,-37,-23,20,-16,-7,-43,-27,36,11,18, 
  /* [3][0][][] */ -35,53,-7,0,-17,37,61,3,4,8,8,19,-14,37,45,16,-13,-1,3,-2,40,-76,-9,23,-15,0,-127,26,-39,-31,-7,9,-38,-9,14,26,36,-12,-40,-34,2,-16,7,19,21,-7,44,17, 
  /* [4][0][][] */ 21,0,-40,5,20,-8,18,-9,-48,7,-6,22,5,-8,-18,12,-29,31,-14,-10,3,-127,-10,-6,36,31,27,-46,40,-10,2,10,-12,51,25,-11,-19,15,-8,3,-12,-56,-85,16,32,29,0,-7, 
  /* [5][0][][] */ -12,49,91,6,-2,28,28,-101,79,-38,-22,-14,102,-69,-1,14,19,-41,46,5,-33,127,21,6,92,8,83,47,105,65,-6,-27,-72,-57,113,46,-55,-43,4,-97,23,-19,64,70,-60,-49,-31,-25, 
  /* [6][0][][] */ 67,-9,-32,15,46,-25,42,-49,45,39,4,-35,-16,51,19,-73,27,-127,-29,-18,29,-14,-7,32,-41,-36,50,-17,58,-40,117,45,51,52,28,-56,-57,17,58,-34,-32,23,-70,62,40,10,44,-46, 
  /* [7][0][][] */ -12,47,50,66,-1,15,62,102,62,31,8,78,-67,-10,26,-19,96,-19,-37,-20,-2,-127,-2,-110,-82,78,56,16,5,27,18,-24,21,-19,13,24,-14,110,-105,-34,11,1,29,-20,-54,6,47,18, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.010170439258217812, 0.0084671089425683022, 0.0083273453637957573, 0.0071139736101031303, 0.0066652335226535797, 0.0053202491253614426, 0.0091731389984488487, 0.0048187114298343658, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 23880, 27201, 10415, 16373, 5129, 12291, 14625, 5032, 43543, -953, 1730, 20052, 15799, -3786, 6880, 181, 11607, 32827, 23148, 824, 6639, -8426, -367, -1195, 38180, 39533, 607, 670, 2353, 14645, -1325, 1764, -14133, 17149, 28775, 26674, 29705, 18308, -397, -408, 4474, 38536, -1624, 1240, -251, -886, 22271, 8449, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 4.5080822019372135e-05, 6.4951942476909608e-05, 0.00010170587484026328, 8.072354830801487e-05, 0.0001009159823297523, 7.067574915708974e-05, 0.00012727918510790914, 0.00011723778152372688, 4.6210217988118529e-05, 9.6442665380891412e-05, 6.9685302150901407e-05, 5.4164593166206032e-05, 0.00013380957534536719, 5.7252687838627025e-05, 7.039235788397491e-05, 8.7417924078181386e-05, 2.6146637537749484e-05, 6.835674139438197e-05, 4.280365101294592e-05, 0.00013071908324491233, 5.591101580648683e-05, 0.00028733024373650551, 0.0001587895822012797, 0.00012055043771397322, 4.80907219753135e-05, 5.6774679251248017e-05, 6.5978056227322668e-05, 0.00011230201198486611, 4.6242836106102914e-05, 9.7734293376561254e-05, 0.00023764651268720627, 0.00022954103769734502, 7.0284731918945909e-05, 7.6506003097165376e-05, 9.5976400189101696e-05, 0.0001082455855794251, 8.4361316112335771e-05, 0.00011409920261939988, 0.00014928994642104954, 9.6177282102871686e-05, 0.00022405767231248319, 3.8004749512765557e-05, 9.5397794211748987e-05, 5.0127029680879787e-05, 0.00039514421951025724, 0.00012396961392369121, 6.9283654738683254e-05, 6.9238660216797143e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -36,-101,-48,-59,-28,-1,-32,-37,-43,65,49,-93,-36,22,-98,68,109,-77,-61,127,54,70,-50,120,-78,-83,85,71,74,-72,95,55,41,-59,-56,-36,-126,-58,115,74,-1,-1,32,89,111,106,-58,-53, -71,-127,-66,-123,-127,-2,-77,-100,-52,100,81,-101,-59,73,-127,93,111,-122,-108,9,59,91,84,114,-52,-104,95,111,83,-78,92,85,76,-101,-72,-60,-127,-71,117,87,-72,-36,60,96,99,99,-96,-96, -42,-62,-34,-89,-102,-2,-42,-30,-35,63,45,-38,-23,72,-91,41,58,-52,-46,-27,49,-127,-60,63,-9,-51,55,37,28,-26,67,48,35,-55,-49,-22,-85,-23,15,32,-36,-30,46,64,68,55,-54,-2, 
  /* [0][1][][] */ -68,-103,-77,-75,-86,-39,-72,-54,-82,85,81,-113,-74,57,-103,95,127,-93,-86,120,101,83,-68,127,-127,-92,92,101,94,-102,103,68,68,-100,-97,-72,-113,-73,117,104,-48,-66,70,89,127,127,-77,-58, -127,-127,-127,-127,-107,-127,-127,-127,-127,127,127,-127,-127,127,-51,127,125,-127,-127,-62,127,94,127,114,-113,-127,127,127,127,-127,127,127,127,-127,-127,-127,-110,-127,127,127,-127,-127,127,127,103,94,-127,-127, -64,-45,-66,-101,-110,-98,-74,-55,-67,74,60,-73,-50,117,-50,56,109,-60,-53,-123,71,-126,-58,67,-27,-64,53,50,66,-61,78,77,60,-81,-71,-54,-74,-59,59,53,-74,-64,79,99,41,12,-60,-34, 
  /* [0][2][][] */ -35,-25,-35,-5,-50,-29,-46,-22,-41,76,33,-37,-40,-3,-71,31,41,-41,-38,18,59,14,-34,48,-60,-28,41,40,46,-41,44,26,47,-49,-63,-55,-26,-26,6,67,-65,-39,41,16,99,53,-47,-20, -63,-22,-80,-20,-82,-120,-75,-59,-70,95,42,-64,-52,72,-78,32,44,-59,-54,-83,75,-3,44,1,-60,-61,42,53,62,-70,51,51,74,-81,-90,-84,-41,-56,21,91,-81,-65,74,60,69,5,-71,-65, -38,15,-43,-50,-42,-106,-52,-24,-35,71,17,-49,-15,38,6,14,53,-13,-52,-106,25,-60,-26,25,-9,-40,6,42,41,-32,28,42,33,-49,-86,-43,-26,-24,33,52,-54,-37,47,37,38,4,-27,-19, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0019159348448738456, 0.0027604575734585524, 0.0043224995024502277, 0.0034307506866753101, 0.0042889290489256382, 0.003003719262778759, 0.0054093655198812485, 0.0049826055765151978, 0.0019639341626316309, 0.0040988130494952202, 0.0029616253450512886, 0.0023019951768219471, 0.0056869066320359707, 0.0024332392495125532, 0.002991675166413188, 0.0037152615841478109, 0.0011112320935353637, 0.002905161352828145, 0.0018191550625488162, 0.0055555608123540878, 0.0023762180935591459, 0.01221153512597084, 0.0067485570907592773, 0.0051233936101198196, 0.0020438556093722582, 0.0024129238445311785, 0.0028040674515068531, 0.004772835411131382, 0.001965320436283946, 0.004153707530349493, 0.010099976323544979, 0.0097554940730333328, 0.0029871009755879641, 0.003251505084335804, 0.0040789968334138393, 0.0046004373580217361, 0.0035853558219969273, 0.0048492159694433212, 0.0063448227010667324, 0.0040875342674553394, 0.0095224510878324509, 0.0016152018215507269, 0.0040544061921536922, 0.0021303987596184015, 0.01679362915456295, 0.0052687083370983601, 0.0029445553664118052, 0.0029426431283354759, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 439, 2249, 1264, -161, -427, 157, 5614, 2090, 1255, -2281, 963, 31, 4079, 5, 776, -1006, -202, 2668, 737, 1072, -485, 18805, 1131, -852, 898, 3312, 1238, -1157, 84, 101, -1533, -1022, 2108, 821, 5071, 6327, 4120, 3540, -2154, -1105, -579, 1362, 1019, 321, -1113, -1589, 1820, 518, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00048752225120551884, 0.00029524063575081527, 0.00038097467040643096, 0.00056023895740509033, 0.0004555645864456892, 0.00032125139841809869, 0.00014965087757445872, 0.00027246418176218867, 0.00039913773071020842, 0.00026325162616558373, 0.00037828553467988968, 0.00043671784806065261, 0.00017494059284217656, 0.00066966167651116848, 0.00054855016060173512, 0.00035115986247546971, 0.00070397375384345651, 0.00024214207951445132, 0.00032281471067108214, 0.00034280499676242471, 0.00047226750757545233, 8.4589024481829256e-05, 0.00037604739191010594, 0.00025287154130637646, 0.00032845328678376973, 0.00021630107949022204, 0.0004845192888751626, 0.00035474676406010985, 0.00057831028243526816, 0.00061901658773422241, 0.00029178167460486293, 0.00030665061785839498, 0.00034013844560831785, 0.0004492683510761708, 0.00018136130529455841, 0.0001538293290650472, 0.00023065409914124757, 0.00021385935542639345, 0.00025157700292766094, 0.00029741253820247948, 0.00046478823060169816, 0.00037667469587177038, 0.00030785211129114032, 0.00046145057422108948, 0.0003750667383428663, 0.00028099832707084715, 0.00029886516858823597, 0.00027983289328403771, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -35,63,-55,52,37,127,34,31, 
  /* [1][0][][] */ 62,-127,-96,-26,-28,64,61,-42, 
  /* [2][0][][] */ -43,60,-37,-109,-49,-127,-36,-88, 
  /* [3][0][][] */ -11,127,63,30,3,-85,-24,25, 
  /* [4][0][][] */ -101,44,-127,81,8,-27,-42,-72, 
  /* [5][0][][] */ 80,-84,-127,26,15,-22,71,-32, 
  /* [6][0][][] */ -22,-87,-63,14,-127,-44,-61,104, 
  /* [7][0][][] */ -22,-45,-17,-49,49,-1,-26,127, 
  /* [8][0][][] */ 14,25,-83,-96,39,-24,-127,-84, 
  /* [9][0][][] */ -127,48,-16,88,-6,61,98,5, 
  /* [10][0][][] */ -26,-12,89,-127,-29,68,18,36, 
  /* [11][0][][] */ 100,-28,97,33,-36,53,71,127, 
  /* [12][0][][] */ 62,30,28,-61,60,111,95,-127, 
  /* [13][0][][] */ 34,51,-44,54,-9,-127,-34,49, 
  /* [14][0][][] */ 10,-127,-24,-24,16,62,41,-32, 
  /* [15][0][][] */ -94,-10,-8,-66,61,127,-79,-24, 
  /* [16][0][][] */ 12,-39,107,9,-27,24,127,72, 
  /* [17][0][][] */ 63,13,51,19,-10,-91,-35,-127, 
  /* [18][0][][] */ -123,17,-73,-15,-13,-127,22,-93, 
  /* [19][0][][] */ 69,12,114,-21,-47,39,83,127, 
  /* [20][0][][] */ 22,127,55,-6,21,39,44,8, 
  /* [21][0][][] */ -34,32,29,-104,-52,127,-3,-15, 
  /* [22][0][][] */ 34,2,88,-5,-40,12,127,90, 
  /* [23][0][][] */ -75,127,62,52,-88,-93,-113,121, 
  /* [24][0][][] */ -23,-2,101,24,-101,127,-8,-72, 
  /* [25][0][][] */ -51,20,75,25,-127,50,-79,24, 
  /* [26][0][][] */ -40,-127,30,-41,17,44,-5,-15, 
  /* [27][0][][] */ -28,59,27,50,-22,127,-35,-12, 
  /* [28][0][][] */ 18,-118,51,30,58,127,44,35, 
  /* [29][0][][] */ 20,127,-26,29,-66,-62,-26,20, 
  /* [30][0][][] */ -44,79,106,94,-127,-57,-59,-104, 
  /* [31][0][][] */ 18,65,26,60,-45,-13,12,-127, 
  /* [32][0][][] */ -22,-29,-64,62,-127,-34,-48,9, 
  /* [33][0][][] */ 76,12,58,53,-30,60,46,127, 
  /* [34][0][][] */ 124,5,-127,-49,-60,5,62,36, 
  /* [35][0][][] */ 114,91,89,-127,-57,-93,32,106, 
  /* [36][0][][] */ -39,-127,125,43,67,62,11,-37, 
  /* [37][0][][] */ 0,11,-30,-4,-15,-53,-45,127, 
  /* [38][0][][] */ 127,-6,63,6,3,19,-71,40, 
  /* [39][0][][] */ 51,104,-103,-127,-96,103,38,-54, 
  /* [40][0][][] */ -37,127,-28,59,-51,-26,-50,-15, 
  /* [41][0][][] */ -127,50,-22,-43,74,43,0,-64, 
  /* [42][0][][] */ 41,-39,-4,-23,-23,127,7,83, 
  /* [43][0][][] */ -72,46,127,18,74,10,-35,5, 
  /* [44][0][][] */ 12,127,-4,35,-44,-61,-22,3, 
  /* [45][0][][] */ -89,72,66,-127,-51,13,-73,-36, 
  /* [46][0][][] */ 47,-43,-17,23,25,6,-127,73, 
  /* [47][0][][] */ -101,-127,18,55,43,-84,20,89, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0039788829162716866, 0.0024095883127301931, 0.0031093012075871229, 0.0045723556540906429, 0.0037180623039603233, 0.002621873514726758, 0.0012213664595037699, 0.0022236995864659548, 0.0032575379591435194, 0.002148512052372098, 0.0030873541254550219, 0.0035642457660287619, 0.0014277668669819832, 0.0054654027335345745, 0.0044769584201276302, 0.0028659696690738201, 0.0057454383932054043, 0.0019762276206165552, 0.0026346324011683464, 0.0027977819554507732, 0.0038543820846825838, 0.00069036812055855989, 0.0030690876301378012, 0.0020637954585254192, 0.0026806513778865337, 0.0017653279937803745, 0.0039543742313981056, 0.0028952439315617085, 0.0047198436222970486, 0.0050520659424364567, 0.0023813580628484488, 0.0025027100928127766, 0.0027760190423578024, 0.0036666758824139833, 0.001480169128626585, 0.001255468581803143, 0.0018824692815542221, 0.0017454000189900398, 0.0020532303024083376, 0.0024273141752928495, 0.0037933406420052052, 0.0030742073431611061, 0.0025125159882009029, 0.003766100388020277, 0.0030610840767621994, 0.0022933506406843662, 0.0024391696788370609, 0.0022838390432298183, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 5684, -12886, -1317, 5065, 3018, -3637, 792, 4291, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00025981254293583333, 0.00016269627667497844, 8.2598482549656183e-05, 0.00018100577290169895, 0.0002670037210918963, 0.00014377919433172792, 0.00022307108156383038, 0.00011516892845975235, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -22,-3,-10,-29,-65,-19,-9,-25,68,4,12,-6,13,17,-22,5,-31,14,-19,-13,-1,9,-20,4,16,-3,81,10,-20,-84,-11,14,-5,33,127,-13,-21,-44,24,-37,26,7,-8,-16,-11,-1,-14,-80, 
  /* [1][0][][] */ 25,-31,-11,65,3,-12,20,37,71,80,44,-54,-54,72,-2,4,-10,-30,21,-19,-65,37,-45,31,83,22,-33,38,26,-3,127,25,-16,-39,-29,-2,-13,13,-23,-7,3,-16,7,24,-5,37,33,24, 
  /* [2][0][][] */ -62,-13,-76,120,-69,-67,24,-68,-83,42,52,-97,-19,-10,-40,0,127,37,-76,-59,-73,-20,-43,13,90,-30,122,-3,87,-20,-72,24,11,-26,49,-5,-57,32,-3,-103,61,-66,-57,-118,-26,-66,-63,103, 
  /* [3][0][][] */ 28,-52,13,-41,38,-19,-8,-73,43,-64,2,-31,-80,-74,-17,10,11,-13,38,-35,-9,35,-81,1,74,-33,50,17,9,-3,-5,-20,-35,30,22,-27,-53,28,3,-2,127,22,-44,39,-55,50,-12,-51, 
  /* [4][0][][] */ 16,6,9,9,7,36,-11,-10,41,21,8,-42,0,5,-60,15,0,16,21,-22,-24,27,1,36,38,-2,-31,5,42,-11,-16,22,-3,-5,25,17,-127,-2,50,8,12,-10,-3,15,-30,45,-29,-95, 
  /* [5][0][][] */ -48,-99,38,118,-37,3,-61,109,-101,83,47,34,-88,27,74,-41,-14,29,26,-9,-6,36,45,50,-54,7,-24,33,-46,-101,43,22,-116,-57,-32,1,127,0,-29,11,-35,-19,88,99,28,40,43,49, 
  /* [6][0][][] */ 94,4,-16,-12,83,-33,-26,-61,43,29,33,-23,-4,9,15,4,0,2,-11,-25,-30,20,17,27,63,-60,50,1,-27,112,-18,10,44,32,-127,-19,-84,-36,26,-67,-13,-7,-9,-88,2,1,-13,-3, 
  /* [7][0][][] */ -36,-68,51,-49,20,127,43,-35,0,-85,-46,4,-1,-19,-46,4,20,-50,100,50,50,-33,10,0,-16,4,110,-6,52,25,12,0,-36,-23,-44,99,-111,92,-34,-31,-42,57,6,-70,18,-14,66,-29, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.011042032390832901, 0.0069145914167165756, 0.0035104353446513414, 0.0076927454210817814, 0.01134765800088644, 0.0061106155626475811, 0.0094805210828781128, 0.0048946794122457504, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 10775, 4359, -1945, 8702, -36, -647, 7090, 278, 3874, 4723, -1006, -198, -3012, 9950, 2425, 26, -4368, -181, -348, 1207, 14337, -68, -16512, 1146, -5532, 155, 720, -317, -796, -2020, -4816, 1538, 15593, -1159, -513, 1019, -796, 3592, -960, 2534, 16196, 1271, 4606, 818, -112, 606, -4288, 6858, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00027347568538971245, 0.00027865188894793391, 0.00025538896443322301, 0.00031872867839410901, 0.00028379444847814739, 0.00070247409166768193, 0.00010529579594731331, 0.00021476954862009734, 5.8112058468395844e-05, 0.00022795521363150328, 0.00040906475624069571, 0.00051210005767643452, 0.00021557920263148844, 0.0002092056383844465, 0.00014766344975214452, 0.00039585519698448479, 7.4931042036041617e-05, 0.0036310630384832621, 0.00048413369222544134, 0.0002528224722482264, 8.5310537542682141e-05, 0.00058082328177988529, 0.0001147826187661849, 0.00021657640172634274, 0.00027032956131733954, 0.00034002953907474875, 0.00030743828392587602, 0.00034108330146409571, 0.0008515380322933197, 0.00021023632143624127, 0.0001695617102086544, 0.00052103860070928931, 6.4066851336974651e-05, 0.00040606080438010395, 0.00018096715211868286, 0.00077566329855471849, 0.00013490310811903328, 0.00024625050718896091, 0.0011971553321927786, 0.0002866086142603308, 6.1372666095849127e-05, 0.00035193641087971628, 0.00018129628733731806, 0.00011775174061767757, 0.00028726272284984589, 0.00033127851202152669, 0.00011473982158349827, 0.00041901567601598799, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -59,48,-43,-49,-8,-17,16,-21,1,-13,11,38,3,-89,-84,14,127,-1,52,40,-96,-53,101,-123,-5,-46,-7,90,-11,16,33,127,-27,-8,-9,-2,-30,-51,-6,18,102,-88,-47,44,70,-115,-37,-6, -18,-127,33,-127,0,-21,-83,127,89,-74,34,38,21,-127,-127,11,-49,12,-32,-80,-76,3,67,127,17,-12,8,127,26,-2,19,-112,-89,31,-3,-26,127,-127,60,-9,-6,-117,-64,32,108,69,41,-36, -23,-1,23,-25,-1,34,13,63,13,14,4,31,33,27,-65,17,55,10,-32,12,-127,49,56,20,-5,64,0,-49,-17,3,20,-42,-36,6,-1,7,-45,110,-13,13,78,-60,12,-41,66,37,-50,-12, 
  /* [0][1][][] */ -22,-23,-123,-15,-31,22,-4,-2,28,-64,-3,-104,-27,-39,-121,112,120,2,127,86,-16,127,127,106,8,-51,-39,2,55,-32,25,-113,-5,-28,-48,-8,-25,-113,48,19,76,127,-37,-18,-73,127,56,-36, -127,44,127,108,127,-118,-127,-14,-21,-127,-127,-127,127,-20,-35,36,9,-127,-94,-127,112,-12,-77,-115,127,-33,127,-52,127,127,-38,72,-127,-127,127,-127,80,-92,-127,-127,20,102,-117,18,-127,-76,127,127, -17,3,14,18,41,127,-25,51,86,10,58,-49,-12,-20,-62,-24,70,43,-4,52,-85,-116,114,-34,10,127,15,0,43,31,127,23,27,13,57,16,-40,77,55,-9,-2,71,113,-24,-48,-58,53,-8, 
  /* [0][2][][] */ -24,3,-54,-13,-5,-17,12,-17,33,14,2,49,3,0,64,-2,6,1,53,10,-56,-4,79,16,-1,-47,-14,-64,7,-9,-20,-38,-14,52,-4,2,-98,-5,-5,4,14,-16,-40,-70,-21,9,-64,-41, -25,-52,50,-10,-80,-23,-103,-99,127,60,52,53,2,-36,2,10,52,97,-35,-20,-90,0,30,-42,3,-41,-70,-72,-15,-30,86,22,-64,49,-65,-8,31,-119,37,40,-127,-25,-127,127,27,-4,57,-49, 11,-14,23,-10,-41,22,6,-99,10,-10,-22,26,13,18,107,-127,27,-22,-27,-14,-74,6,32,-13,-2,36,-33,11,-3,-22,11,9,-3,50,-43,7,-121,86,-18,23,-3,-35,33,45,-19,-16,-82,-20, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011622716672718525, 0.011842705309391022, 0.010854030959308147, 0.013545968569815159, 0.012061263434588909, 0.029855148866772652, 0.004475071094930172, 0.0091277053579688072, 0.0024697624612599611, 0.0096880961209535599, 0.017385251820087433, 0.021764252334833145, 0.0091621158644556999, 0.0088912397623062134, 0.0062756962142884731, 0.016823844984173775, 0.003184569301083684, 0.15432018041610718, 0.020575681701302528, 0.010744955390691757, 0.0036256976891309023, 0.02468498982489109, 0.0048782611265778542, 0.0092044966295361519, 0.011489006690680981, 0.014451255090534687, 0.013066126964986324, 0.014496040530502796, 0.036190364509820938, 0.0089350435882806778, 0.0072063724510371685, 0.022144140675663948, 0.0027228412218391895, 0.017257584258913994, 0.0076911039650440216, 0.032965689897537231, 0.0057333819568157196, 0.010465646162629128, 0.050879098474979401, 0.012180865742266178, 0.0026083381380885839, 0.014957297593355179, 0.0077050919644534588, 0.0050044488161802292, 0.01220866572111845, 0.014079336076974869, 0.0048764422535896301, 0.017808165401220322, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 3393, 1171, 3126, 5993, 258, 2754, 1431, 1596, 1335, 3211, 2309, 3952, 2388, 1649, 2162, 109, 220, -2206, 3720, 2121, 1186, 3915, 6773, 439, 2374, 2093, 2076, -305, -1360, 1033, 4373, 2570, 818, 977, 533, -510, 851, 1847, 59, 1451, 1140, 5203, 1916, 703, 1597, 1197, -29, 11783, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00028072725399397314, 0.00047843169886618853, 0.00022541865473613143, 0.00017628853674978018, 0.001450930954888463, 0.00023405079264193773, 0.00045391364255920053, 0.00036128141800872982, 0.00035241321893408895, 0.00022082238865550607, 0.00030261988285928965, 0.00015469704521819949, 0.00030562092433683574, 0.00026192291988991201, 0.00023219926515594125, 0.00029285351047292352, 0.00046939856838434935, 0.00035984264104627073, 0.00025476538576185703, 0.0005051089683547616, 0.00061355624347925186, 0.00021406736050266773, 0.00013164019037503749, 0.00049286044668406248, 0.00024496123660355806, 0.00043833930976688862, 0.00034936665906570852, 0.00029202198493294418, 0.00031939093605615199, 0.000898191356100142, 0.00020289090753067285, 0.00031301981653086841, 0.00074806355405598879, 0.00029364792862907052, 0.0010758363641798496, 0.00031830000807531178, 0.00024675403255969286, 0.00023551056801807135, 0.00026987830642610788, 0.00045094676897861063, 0.00036777689820155501, 0.00016755762044340372, 0.00021441881835926324, 0.00034834028338082135, 0.00031958805629983544, 0.00040969112887978554, 0.00043544589425437152, 9.0510766312945634e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -122,-6,20,-112,-127,122,-4,-67, 
  /* [1][0][][] */ 83,2,21,-26,7,64,-127,47, 
  /* [2][0][][] */ -35,60,-112,82,-57,127,26,41, 
  /* [3][0][][] */ 100,-26,-35,73,-3,-68,10,127, 
  /* [4][0][][] */ -86,-6,-1,13,-18,-41,127,7, 
  /* [5][0][][] */ 48,127,20,30,-115,-43,13,-16, 
  /* [6][0][][] */ -4,-74,36,127,18,-104,-13,34, 
  /* [7][0][][] */ 127,5,101,0,-75,21,81,126, 
  /* [8][0][][] */ -32,-127,44,47,78,-36,-26,6, 
  /* [9][0][][] */ -71,-102,15,-31,-26,5,-50,127, 
  /* [10][0][][] */ -23,-127,27,88,68,109,19,-25, 
  /* [11][0][][] */ -117,-118,22,-54,54,65,-52,127, 
  /* [12][0][][] */ 77,-26,88,-81,31,-127,79,3, 
  /* [13][0][][] */ 37,21,20,127,-14,17,31,-60, 
  /* [14][0][][] */ -37,-11,32,0,120,-19,5,127, 
  /* [15][0][][] */ -67,127,42,69,56,100,-35,85, 
  /* [16][0][][] */ 9,-27,-74,-127,-76,67,26,56, 
  /* [17][0][][] */ 27,127,4,64,-25,-45,-9,17, 
  /* [18][0][][] */ 17,43,-15,-127,-44,-75,27,-14, 
  /* [19][0][][] */ 33,-53,-127,-88,-81,97,17,-14, 
  /* [20][0][][] */ 30,6,14,-5,127,22,32,-37, 
  /* [21][0][][] */ -127,-71,-54,-78,43,31,43,-12, 
  /* [22][0][][] */ -72,-42,76,127,45,-38,-48,118, 
  /* [23][0][][] */ 14,34,-47,127,113,27,26,105, 
  /* [24][0][][] */ 127,4,-105,-14,-2,-22,46,-38, 
  /* [25][0][][] */ 10,-10,-47,-15,69,-16,-127,-65, 
  /* [26][0][][] */ 126,4,111,-39,-88,50,56,127, 
  /* [27][0][][] */ 16,-62,-33,127,45,0,-29,-104, 
  /* [28][0][][] */ -61,127,88,72,64,-20,-27,2, 
  /* [29][0][][] */ 4,-2,51,-1,-70,2,127,67, 
  /* [30][0][][] */ -61,-71,54,-66,-73,127,57,47, 
  /* [31][0][][] */ 121,29,83,-14,-114,87,89,127, 
  /* [32][0][][] */ -113,-17,-34,39,-23,26,127,16, 
  /* [33][0][][] */ -127,118,69,74,38,19,-70,17, 
  /* [34][0][][] */ 104,2,27,-17,11,44,-127,19, 
  /* [35][0][][] */ 3,-3,22,32,-42,32,12,-127, 
  /* [36][0][][] */ 13,-1,-55,-96,52,-13,20,127, 
  /* [37][0][][] */ 52,-33,-38,-48,-27,28,53,-127, 
  /* [38][0][][] */ 36,127,15,120,-86,-100,-28,-34, 
  /* [39][0][][] */ 109,-6,114,-11,-97,43,125,127, 
  /* [40][0][][] */ -66,-70,127,104,-13,-30,-97,30, 
  /* [41][0][][] */ 27,-24,15,17,34,-62,-13,127, 
  /* [42][0][][] */ 63,-88,-82,-86,-60,75,41,-127, 
  /* [43][0][][] */ 95,-1,121,-32,-86,-15,109,127, 
  /* [44][0][][] */ -100,-98,-58,127,123,-11,-76,36, 
  /* [45][0][][] */ 127,-18,90,-27,-38,23,-13,82, 
  /* [46][0][][] */ 35,-117,8,75,127,0,46,18, 
  /* [47][0][][] */ 87,127,-35,127,-52,-79,36,-98, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0026909050066024065, 0.0045859967358410358, 0.0021607456728816032, 0.001689809956587851, 0.013907867483794689, 0.0022434887941926718, 0.0043509793467819691, 0.0034630552399903536, 0.0033780492376536131, 0.0021166882943361998, 0.0029007564298808575, 0.0014828451676294208, 0.0029295228887349367, 0.0025106563698500395, 0.0022257410455495119, 0.0028071410488337278, 0.0044994098134338856, 0.0034492637496441603, 0.0024420481640845537, 0.0048417113721370697, 0.0058812298811972141, 0.0020519380923360586, 0.0012618341716006398, 0.0047243032604455948, 0.0023480707313865423, 0.0042016920633614063, 0.0033488466870039701, 0.0027991705574095249, 0.0030615148134529591, 0.0086095938459038734, 0.0019448064267635345, 0.003000444732606411, 0.0071705467998981476, 0.0028147560078650713, 0.010312406346201897, 0.0030510579235851765, 0.0023652554955333471, 0.002257481450214982, 0.0025869125965982676, 0.0043225404806435108, 0.0035253176465630531, 0.0016061199130490422, 0.0020553069189190865, 0.0033390081953257322, 0.0030634044669568539, 0.0039270855486392975, 0.0041739572770893574, 0.00086758902762085199, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 3374, 1983, 650, 9501, 6146, 5731, 2053, -2734, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00013733164814766496, 0.00011646064376691356, 0.00012316665379330516, 0.00017105946608353406, 0.0001042000949382782, 0.00012232662993483245, 0.00011369438288966194, 0.00031953997677192092, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -28,40,-32,2,-44,-26,-78,23,9,22,35,39,36,9,-46,11,-43,45,13,-61,33,39,-127,5,-11,7,-28,51,-3,-9,26,21,16,-24,36,19,-3,108,-65,-14,-10,20,-27,28,7,10,17,-5, 
  /* [1][0][][] */ -73,-103,-57,7,89,-23,-124,58,-23,-40,-13,-82,-25,75,7,-8,113,-127,-11,-22,-63,3,3,-13,24,-2,-32,-58,22,-10,-120,-21,21,-52,-80,-103,43,13,-88,-2,-5,38,13,84,-15,4,4,43, 
  /* [2][0][][] */ 12,-62,11,56,110,20,98,-11,-33,-26,-10,-42,2,-21,16,34,-31,-87,43,-58,8,-68,-55,14,-70,54,73,-90,-34,0,-53,-49,20,8,-64,-46,-9,127,79,-28,-9,9,-24,-73,45,40,49,-21, 
  /* [3][0][][] */ 10,6,21,-15,33,29,20,-90,25,16,-10,14,1,-105,-16,2,-31,10,-17,-2,-7,51,-127,7,21,-90,32,26,37,-8,-29,50,2,12,1,-31,-91,-43,9,-15,-10,-1,37,3,-17,5,2,-47, 
  /* [4][0][][] */ 37,-56,13,76,55,13,-27,-11,-35,-9,20,-28,78,36,-18,36,-52,-61,69,39,38,-55,127,24,-34,17,-57,-18,-13,17,-80,-45,87,-25,-43,-61,-40,-46,-22,-1,-64,104,0,-6,62,84,47,21, 
  /* [5][0][][] */ -64,-25,-38,52,-7,10,-2,-54,-58,-39,0,-26,13,31,-75,11,127,-18,55,-78,26,-100,-10,-10,85,-110,-105,-17,49,-51,30,-79,15,-59,-38,25,-76,-24,18,-36,-46,25,93,45,44,15,23,-42, 
  /* [6][0][][] */ -33,6,-34,34,-27,75,-76,14,-21,1,-127,12,51,40,125,23,24,8,44,-10,40,-14,-46,-16,16,0,-76,20,7,-46,8,-22,34,-43,7,8,-5,-4,-56,-24,-34,45,-24,31,29,33,38,1, 
  /* [7][0][][] */ 32,-4,38,-18,3,9,13,-12,15,6,-7,-1,-11,-5,-2,-12,13,-3,-24,-20,-20,14,127,13,7,-15,-1,11,5,-10,-20,14,0,21,1,-18,-11,13,7,28,6,-1,9,-3,-16,-1,-24,16, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0058365948498249054, 0.0049495771527290344, 0.0052345828153192997, 0.0072700274176895618, 0.0044285040348768234, 0.0051988814957439899, 0.0048320111818611622, 0.013580448925495148, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 4648, -730, -84, -914, 6706, 3292, 2300, 1979, 3415, -1514, -4312, 2312, 2115, 1450, -653, -169, 12086, 499, 614, 32823, -261, 15754, -447, 396, 258, -7935, 8000, -828, 837, -951, 5808, 6550, 587, 1714, 2484, 1462, 7702, -1516, 3402, -472, -761, -417, 17637, -6405, 387, -187, -231, -826, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.1817569076083601e-05, 0.0001869534607976675, 0.0020264021586626768, 0.0010029419790953398, 0.00013619854871649295, 0.00017053988995030522, 6.8808280047960579e-05, 0.0004747571365442127, 0.00013479520566761494, 0.00037501257611438632, 7.1170601586345583e-05, 0.00050931063015013933, 0.0011610017390921712, 0.00013993809989187866, 0.00010364460467826575, 0.0060779410414397717, 0.00016247507301159203, 0.00017594583914615214, 0.00044720750884152949, 0.00010847391240531579, 0.00086144322995096445, 9.109482925850898e-05, 0.00032993798959068954, 0.00013749695790465921, 0.0001420340413460508, 0.0006929622613824904, 0.00012174128642072901, 0.00032566228765062988, 0.00054548727348446846, 0.00023840946960262954, 7.9058925621211529e-05, 0.00010907423711614683, 0.0019338130950927734, 0.00069105776492506266, 0.00015871887444518507, 0.0001555132184876129, 0.00013605272397398949, 7.5230171205475926e-05, 9.8923461337108165e-05, 0.00034619573852978647, 0.00032768398523330688, 0.0007022224017418921, 8.0831523519009352e-05, 0.00017068530723918229, 0.0011780335335060954, 0.0010681947460398078, 0.0038852621801197529, 0.00076532381353899837, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 106,-30,-68,-90,35,-105,69,-67,72,44,101,39,-99,67,61,-118,60,-100,-1,-43,-127,-61,37,109,-1,70,-11,78,-127,-39,95,-76,-44,-71,40,86,-127,44,110,81,-43,-127,-67,28,-72,-33,7,-81, 79,-54,77,127,102,33,123,-115,-79,127,61,57,-8,64,55,120,62,-99,-113,-58,98,-95,52,-1,120,127,-37,96,-1,61,88,-44,49,111,127,127,-91,37,70,-27,89,23,-44,104,127,109,-3,-9, 33,-22,6,-37,48,51,19,-102,-6,69,-73,24,82,1,-54,0,18,-34,96,-16,40,0,-84,-83,26,5,-13,41,24,79,37,11,-3,-48,25,38,-12,4,12,-56,-51,101,17,95,-62,-78,-2,79, 
  /* [0][1][][] */ 127,72,-127,19,-79,-127,74,-81,100,-66,127,-97,77,85,127,127,-50,112,-11,-91,123,-88,50,127,-8,-5,-36,27,-61,90,62,-127,-127,-80,-27,24,-9,103,127,127,-53,-79,-127,47,-2,-27,-126,-127, 126,127,111,-20,-127,11,127,-127,-127,-127,86,-127,27,127,95,-125,-44,127,127,-127,-71,-127,75,-40,69,9,-127,83,3,127,127,-102,114,127,-36,0,-17,127,95,-46,127,-6,-55,127,-10,127,127,46, 33,57,3,10,-27,77,26,-102,-2,-90,-81,-73,-127,1,-61,2,23,34,-115,-52,-56,-16,-127,-102,-35,-1,-72,32,33,99,25,11,5,-66,-16,-6,7,29,16,-74,-67,93,-14,119,8,-84,5,98, 
  /* [0][2][][] */ 47,-43,-28,3,45,-27,8,-31,71,22,34,36,-1,36,-2,-13,-127,-33,-6,-18,20,-51,12,39,85,-16,-14,-93,16,51,-19,-78,-28,-45,-79,-7,87,28,36,71,-106,-49,-99,30,1,1,96,-63, 20,-63,5,4,40,3,29,-63,-91,70,4,50,-26,44,1,15,-99,-25,-16,-52,-28,-76,31,-15,127,-13,-44,-127,11,63,-10,-55,24,82,-68,10,92,51,21,-31,-64,7,-42,94,-5,-2,-96,63, 10,-24,24,10,9,21,11,-27,-5,55,-30,23,12,-25,-11,3,11,-3,21,-33,10,-3,-40,-55,-15,-8,-10,-35,9,72,-18,17,-7,-41,-51,-2,79,18,1,-43,-106,58,-22,67,4,10,7,15, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.002627246780321002, 0.0079455217346549034, 0.086122088134288788, 0.042625032365322113, 0.0057884380221366882, 0.0072479452937841415, 0.0029243519529700279, 0.020177178084850311, 0.005728796124458313, 0.015938034281134605, 0.0030247506219893694, 0.021645702421665192, 0.049342572689056396, 0.0059473691508173943, 0.0044048954732716084, 0.25831249356269836, 0.006905190646648407, 0.007477697916328907, 0.019006319344043732, 0.0046101412735879421, 0.036611337214708328, 0.0038715300615876913, 0.014022364281117916, 0.0058436207473278046, 0.0060364468954503536, 0.029450895264744759, 0.0051740044727921486, 0.013840646483004093, 0.023183209821581841, 0.010132402181625366, 0.0033600043971091509, 0.0046356548555195332, 0.082187056541442871, 0.029369954019784927, 0.0067455521784722805, 0.006609311792999506, 0.0057822405360639095, 0.0031972823198884726, 0.0042042471468448639, 0.014713319018483162, 0.013926569372415543, 0.029844451695680618, 0.0034353397786617279, 0.0072541255503892899, 0.050066422671079636, 0.045398276299238205, 0.16512364149093628, 0.032526262104511261, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { -985, -8268, 16613, 3139, 10916, 2459, 3080, 423, -1844, -8189, 190, 3327, 20050, -12278, -174, 3029, -7270, -488, 1893, 6959, 8800, 2853, 510, -401, 12332, 25182, 10981, -10923, 2262, -1305, 159, -3442, 18925, 8059, 11659, -1969, -11625, 59, -3621, -156, -12768, -9288, -1493, 2820, 6939, -11914, 4715, -1432, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00033644569339230657, 0.00024474889505654573, 5.5781525588827208e-05, 0.00029690098017454147, 0.00026965985307469964, 0.0018724682740867138, 0.0011012579780071974, 0.00060184113681316376, 0.00070477556437253952, 0.00026626657927408814, 0.0042271297425031662, 0.00033130997326225042, 6.7705746914725751e-05, 0.000312721764203161, 0.0017787201795727015, 8.1498648796696216e-05, 0.00025273684877902269, 0.00042553257662802935, 0.0003803796716965735, 0.00020592226064763963, 0.00015361644909717143, 0.0015617551980540156, 0.00042491653584875166, 0.00091606494970619678, 0.00017900409875437617, 8.0327488831244409e-05, 0.00035521673271432519, 0.00029375642770901322, 0.0011003834661096334, 0.00046091910917311907, 0.001248443964868784, 0.0014589856145903468, 0.00011496881779748946, 0.00028610421577468514, 0.00027145069907419384, 0.00088997709099203348, 0.00036454759538173676, 0.00038740696618333459, 0.001134815625846386, 0.00035219028359279037, 0.00029062904650345445, 0.00022960471687838435, 0.000366304098861292, 0.00038262284942902625, 0.00014733223360963166, 0.00025481701595708728, 6.3776984461583197e-05, 0.00055913376854732633, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 11,50,5,-17,93,-21,127,-4, 
  /* [1][0][][] */ 127,86,72,14,-10,-43,-5,118, 
  /* [2][0][][] */ -63,9,1,127,10,-16,-37,61, 
  /* [3][0][][] */ 58,-36,-125,0,-1,-45,22,127, 
  /* [4][0][][] */ -126,83,-127,-9,19,30,-32,-47, 
  /* [5][0][][] */ 123,-14,-6,-42,-1,-34,10,-127, 
  /* [6][0][][] */ 8,-6,-6,-2,-127,-28,65,3, 
  /* [7][0][][] */ -4,-59,-4,0,-25,2,-127,-3, 
  /* [8][0][][] */ -8,28,34,-1,127,12,-59,-18, 
  /* [9][0][][] */ 127,-52,31,5,-1,-20,54,115, 
  /* [10][0][][] */ 127,6,-4,-35,-1,13,0,-122, 
  /* [11][0][][] */ -49,-3,-1,127,-1,-40,-30,33, 
  /* [12][0][][] */ -124,-5,-79,-17,19,123,-53,-127, 
  /* [13][0][][] */ 118,11,127,16,-9,20,25,45, 
  /* [14][0][][] */ -127,-4,13,17,-1,-12,8,123, 
  /* [15][0][][] */ -127,9,-1,125,0,-3,-24,125, 
  /* [16][0][][] */ 58,-70,127,74,-20,-108,29,68, 
  /* [17][0][][] */ 13,-45,-79,127,3,15,-5,107, 
  /* [18][0][][] */ 18,-36,-117,42,-13,3,32,127, 
  /* [19][0][][] */ 25,18,-10,127,-4,3,-64,-44, 
  /* [20][0][][] */ 12,48,106,-116,0,-64,7,-127, 
  /* [21][0][][] */ 6,-4,-5,0,-127,-14,59,4, 
  /* [22][0][][] */ 3,57,-2,-15,2,127,-12,4, 
  /* [23][0][][] */ 127,26,0,95,-4,-3,-47,-121, 
  /* [24][0][][] */ -127,22,-94,-56,27,-45,-50,-64, 
  /* [25][0][][] */ -51,-4,-63,-42,4,-127,12,-48, 
  /* [26][0][][] */ -113,-30,-127,9,7,-1,-21,-33, 
  /* [27][0][][] */ 89,-2,127,17,-6,45,22,35, 
  /* [28][0][][] */ 8,-66,-22,35,26,-127,0,16, 
  /* [29][0][][] */ -2,-9,32,-127,-12,-8,22,4, 
  /* [30][0][][] */ -44,3,127,-9,-3,8,-7,-120, 
  /* [31][0][][] */ 0,10,5,-1,127,23,-50,0, 
  /* [32][0][][] */ -127,-17,-110,-6,1,-29,-23,-67, 
  /* [33][0][][] */ 10,-59,3,-35,33,-127,14,-20, 
  /* [34][0][][] */ -50,-127,-127,66,-3,-60,-14,-18, 
  /* [35][0][][] */ 59,4,-108,-2,-1,2,6,127, 
  /* [36][0][][] */ 70,41,84,30,6,127,18,35, 
  /* [37][0][][] */ -9,19,-2,127,6,-20,-14,13, 
  /* [38][0][][] */ 0,22,8,1,127,25,-37,-2, 
  /* [39][0][][] */ -8,14,-11,14,-32,127,-107,-4, 
  /* [40][0][][] */ 127,-19,117,20,-24,32,17,57, 
  /* [41][0][][] */ 110,-8,127,18,-8,5,29,45, 
  /* [42][0][][] */ 50,-55,-17,-31,26,127,16,-32, 
  /* [43][0][][] */ -10,-66,-9,0,-44,-20,-127,2, 
  /* [44][0][][] */ -22,-127,39,97,13,41,8,-119, 
  /* [45][0][][] */ 124,10,127,-3,-4,29,25,47, 
  /* [46][0][][] */ -88,19,0,127,0,3,-36,66, 
  /* [47][0][][] */ -6,46,-9,-1,0,127,-14,0, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0036223155912011862, 0.0026350694242864847, 0.00060056732036173344, 0.0031965605448931456, 0.0029032710008323193, 0.020159779116511345, 0.011856605298817158, 0.0064796740189194679, 0.0075879092328250408, 0.0028667375445365906, 0.045511052012443542, 0.0035670220386236906, 0.00072894844925031066, 0.0033668936230242252, 0.019150447100400925, 0.0008774486486800015, 0.0027210710104554892, 0.0045814621262252331, 0.0040953271090984344, 0.0022170455195009708, 0.0016538992058485746, 0.016814511269330978, 0.0045748297125101089, 0.0098627395927906036, 0.0019272333011031151, 0.00086483947234228253, 0.0038244123570621014, 0.00316270487383008, 0.011847189627587795, 0.0049624484963715076, 0.013441272079944611, 0.01570805162191391, 0.0012378025567159057, 0.0030803179834038019, 0.0029225521720945835, 0.0095818666741251945, 0.0039248722605407238, 0.0041709858924150467, 0.012217901647090912, 0.0037918284069746733, 0.0031290343031287193, 0.00247202068567276, 0.0039437836967408657, 0.004119478166103363, 0.0015862405998632312, 0.0027434669900685549, 0.00068664975697174668, 0.0060198688879609108, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 1335, 1257, -839, -8833, 193, -1265, -192, 4222, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00023153371876105666, 0.00024256373581010848, 0.00035008331178687513, 0.00021233387815300375, 0.00025963701773434877, 0.00011380237992852926, 0.00035156868398189545, 0.00019437368609942496, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -13,-13,-20,15,-11,-127,9,37, 
  /* [1][0][][] */ -60,26,-127,117,9,58,-18,43, 
  /* [2][0][][] */ 13,-9,24,-5,-8,-127,11,29, 
  /* [3][0][][] */ 24,53,52,127,20,-41,-39,-12, 
  /* [4][0][][] */ 18,53,23,-17,-127,-7,24,-4, 
  /* [5][0][][] */ 64,-23,127,-110,20,-61,-5,-43, 
  /* [6][0][][] */ 31,127,50,-36,38,-13,-67,-19, 
  /* [7][0][][] */ -21,-27,-43,-17,-12,-127,20,43, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0098401829600334167, 0.01030895859003067, 0.014878540299832821, 0.0090241897851228714, 0.011034572497010231, 0.0048366012051701546, 0.014941669069230556, 0.0082608815282583237, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { 12166, -61, 4921, 1256, 11383, 412, 559, -2158, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00014006216952111572, 0.00046825839672237635, 0.0001970841403817758, 0.00066201883601024747, 0.00023590050113853067, 0.00026624544989317656, 0.00069753412390127778, 8.6735468357801437e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -26,-4,-3,-1,-3,27,-1,0, 12,0,2,-7,11,127,11,127, 1,0,3,-8,-2,17,0,8, 
  /* [0][1][][] */ 1,-127,-13,3,-13,-6,-107,0, -127,103,-84,127,-127,-8,127,-37, 7,-1,-4,-65,-5,2,46,-25, 
  /* [0][2][][] */ 12,0,-4,-4,1,-23,3,0, 50,1,127,-22,11,-113,3,12, 2,0,-8,-9,0,-20,-4,-1, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0059526422992348671, 0.019900981336832047, 0.0083760758861899376, 0.028135798871517181, 0.010025771334767342, 0.011315431445837021, 0.029645200818777084, 0.0036862574052065611, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 33180, 2950, 38935, 12311, 8663, 570712, 9210, 26665, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 9.7653239208739251e-05, 8.2731654401868582e-05, 9.9184464488644153e-05, 8.8398868683725595e-05, 0.00020778168982360512, 5.577946467383299e-06, 1.2365343536657747e-05, 0.0001195841032313183, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 10,-4,12, 9,-23,31, 12,-24,21, 
  /* [0][1][][] */ 40,28,26, 66,18,59, 25,-33,39, 
  /* [0][2][][] */ -21,-93,-13, -29,-127,-1, -7,-55,18, 
  /* [1][0][][] */ 28,74,23, 4,8,-3, -33,-69,-27, 
  /* [1][1][][] */ 50,119,37, 0,-1,-4, -57,-127,-40, 
  /* [1][2][][] */ 27,43,10, 2,-2,-1, -34,-54,-4, 
  /* [2][0][][] */ 42,91,10, 53,127,12, 16,42,-2, 
  /* [2][1][][] */ -48,-85,-29, -82,-95,-39, -32,-7,-21, 
  /* [2][2][][] */ -1,10,6, 4,16,-1, 0,11,-7, 
  /* [3][0][][] */ 44,-32,-17, 78,-36,-40, 32,-16,-11, 
  /* [3][1][][] */ 78,-58,-39, 127,-56,-76, 59,-29,-30, 
  /* [3][2][][] */ 17,-23,-6, 40,-30,-18, 15,-12,-3, 
  /* [4][0][][] */ -12,-23,-4, 27,45,9, -16,-29,-4, 
  /* [4][1][][] */ -28,-60,-9, 64,127,19, -34,-61,-8, 
  /* [4][2][][] */ -9,-13,3, 21,25,-3, -11,-13,-2, 
  /* [5][0][][] */ -34,-57,-30, -53,-78,-45, -43,-26,-21, 
  /* [5][1][][] */ -65,-106,-46, -91,-127,-62, -52,-35,-26, 
  /* [5][2][][] */ -5,3,-12, -6,-2,-7, -4,10,2, 
  /* [6][0][][] */ -99,-3,39, 4,22,-12, 69,19,-18, 
  /* [6][1][][] */ -127,-33,48, 17,23,-25, 113,19,-30, 
  /* [6][2][][] */ -49,-11,21, 18,-5,1, 38,-11,33, 
  /* [7][0][][] */ -6,16,-2, -16,22,-8, -7,21,-8, 
  /* [7][1][][] */ 17,84,-6, 22,127,-23, -3,60,-28, 
  /* [7][2][][] */ -28,-50,-20, -43,-53,-33, -21,3,-20, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.024901574477553368, 0.021096570417284966, 0.025292037054896355, 0.0225417111068964, 0.052984327077865601, 0.001422376255504787, 0.0031531623098999262, 0.030493944883346558, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10802549868822098, } };
const TfArray<1, int> quant46_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.092881388962268829, } };
const TfArray<1, int> quant47_zero = { 1, { -50 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,64,64,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,65,65,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.10432447493076324, } };
const TfArray<1, int> quant51_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.084463611245155334, } };
const TfArray<1, int> quant54_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.12252742052078247, } };
const TfArray<1, int> quant55_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,33,33,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.073658458888530731, } };
const TfArray<1, int> quant59_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.030663508921861649, } };
const TfArray<1, int> quant62_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.068825148046016693, } };
const TfArray<1, int> quant63_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.066370464861392975, } };
const TfArray<1, int> quant66_zero = { 1, { 35 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.088205426931381226, } };
const TfArray<1, int> quant67_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,16,16,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.061190336942672729, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,16,16,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.11069055646657944, } };
const TfArray<1, int> quant70_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,16,16,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 65536), (TfLiteIntArray*)&g0::tensor_dimension44, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32768), (TfLiteIntArray*)&g0::tensor_dimension46, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension48, 196608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 202800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension50, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 98304), (TfLiteIntArray*)&g0::tensor_dimension51, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension52, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension54, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension56, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 52272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension58, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 26624), (TfLiteIntArray*)&g0::tensor_dimension59, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension60, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension62, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension63, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension64, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14336), (TfLiteIntArray*)&g0::tensor_dimension66, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension67, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension69, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 768), (TfLiteIntArray*)&g0::tensor_dimension70, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_207_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_207_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_207_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_207_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_207_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
